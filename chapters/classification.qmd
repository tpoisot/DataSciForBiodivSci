---
engine: julia
---

# Supervised classification {#sec-classification}

In the previous chapters, we have focused our efforts on regression models, which is to say models that predict a continuous response. In this chapter, we will introduce the notion of classification, which is the prediction of a discrete variable representing a category. There are a lot of topics we need to cover before we can confidently come up with a model for classification, and so this chapter is part of a series. We will first introduce the idea of classification; in @sec-predictors, we will explore techniques to fine-tune the set of variables we use for prediction; in @sec-tuning, we will think about predictions of classes as probabilities, and generalize these ideas and think about learning curves; finally, in @sec-explanations, we will think about variables a lot more, and introduce elements of model interpretability.

```{julia}
#| echo: false
#| output: false
_code_path = joinpath(dirname(Base.active_project()), "code")
include(joinpath(_code_path, "pkg.jl"))
include(joinpath(_code_path, "minisdm/pipelines.jl"))
```

## The problem: distribution of an endemic species

Throughout these chapters, we will be working on a single problem, which is to predict the distribution of the Corsican nuthatch, *Sitta whiteheadi*. The Corsican nuthatch is endemic to Corsica, and its range has been steadily shrinking over time due to loss of habitat through human activity, including fire, leading to it being classified as "vulnerable to extinction" by the International Union for the Conservation of Nature. @barbet-massin2011 nevertheless show that the future of this species is not necessarily all gloom and doom, as climate change is not expected to massively affect its distribution.

Species Distribution Modeling (SDM; @elith2009), also known as Ecological Niche Modeling (ENM), is an excellent instance of ecologists doing applied machine learning already, as @beery2021 rightfully pointed out. In fact, the question of fitness-for-purpose, which we discussed in previous chapters (for example in @sec-crossvalidation-fitness), has been covered in the SDM literature [@guillera-arroita2015]. In these chapters, we will fully embrace this idea, and look at the problem of predicting where species can be as a data science problem. In the next chapters, we will converge again on this problem as an ecological one. Being serious our data science practices when fitting a species distribution model is important: @cholletramampiandra2023 make the important point that it is easy to overfit more complex models, at which point they cease outperforming simple statistical models.

```{julia}
#| echo: false
#| output: false
_path = joinpath(_data_path, "general", "observations.csv")
occdata = DataFrame(CSV.File(_path))
coordinates = select(occdata, [:presence, :longitude, :latitude])
select!(occdata, Not(:latitude))
select!(occdata, Not(:longitude))
raw = copy(occdata)
```

Because this chapter is the first of a series, we will start by building a bare-bones model on ecological first principles. This is an important step. The rough outline of a model is often indicative of how difficult the process of training a really good model will be. But building a good model is an iterative process, and so we will start with a very simple model and training strategy, and refine it over time. In this chapter, the purpose is less to have a very good training process; it is to familiarize ourselves with the task of classification.

We will therefore start with a blanket assumption: the distribution of species is something we can predict based on temperature and precipitation. We know this to be important for plants and animals [@clapham1935; @whittaker1962], to the point where the relationship between mean temperature and annual precipitation is how we find delimitations between biomes. If you need to train a lot of models on a lot of species, temperature and precipitation are not the worst place to start [@berteaux2014].

Consider our dataset for a minute. In order to predict the presence of a species, we need information about where the species has been observed; this we can get from the [Global Biodiversity Information Facility]. We need information about where the species has *not* been observed; this is usually not directly available, but there are ways to generate background points that are a good approximation of this [@hanberry2012; @barbet-massin2012]. All of these data points come in the form $(\text{lat.}, \text{lon.}, y)$, which give a position in space, as well as $y = \{+,-\}$ (the species is present or absent!) at this position.

  [Global Biodiversity Information Facility]: https://www.gbif.org/

To build a model with temperature and precipitation as inputs, we need to extract the temperature and precipitation at all of these coordinates. We will use the CHELSA1 dataset [@karger2017], at a resolution of 30 seconds of arc. WorldClim2 [@fick2017] also offers access to similar bioclimatic variables, but is known to have some artifacts that may bias the analysis.

```{julia}
#| echo: false
#| output: false
y = occdata.presence
X = permutedims(Matrix(select(occdata, Not(:presence))))
trn, tst = holdout(y, X)
ty = y[tst]
tX = X[:,tst]
y = y[trn]
X = X[:,trn]

folds = kfold(y, X; k=15)
bags = bootstrap(y, X; n=50)

latlon=Matrix(coordinates[trn,[3,2]])

testingpath = joinpath(_models_path, "sdm-testing-data.jld2")
trainingpath = joinpath(_models_path, "sdm-training-data.jld2")
JLD2.jldsave(testingpath; y=ty, X=tX)
JLD2.jldsave(trainingpath; y=y, X=X, coordinates=latlon, folds=folds, bags=bags)
```

The predictive task we want to complete is to get a predicted presence or absence $\hat y = \{+,-\}$, from a vector $\mathbf{x}^\top = [\text{temp.} \quad \text{precip.}]$. This specific task is called classification, and we will now introduce some elements of theory.

## What is classification?

Classification is the prediction of a qualitative response. In @sec-clustering, for example, we predicted the class of a pixel, which is a qualitative variable with levels $\{1, 2, \dots, k\}$. This represented an instance of *unsupervised* learning, as we had no *a priori* notion of the correct class of the pixel. When building SDMs, by contrast, we often know where species are, and we can simulate "background points", that represent assumptions about where the species are not. For this series of chapters, the background points have been generated by sampling preferentially the pixels that are farther away from known presences of the species.

::: column-margin
When working on $\{+,-\}$ outcomes, we are specifically performing *binary* classification. Classification can be applied to more than two levels.
:::

In short, our response variable has levels $\{+, -\}$: the species is there, or it is not -- we will challenge this assumption later in the series of chapters, but for now, this will do. The case where the species is present is called the *positive class*, and the case where it is absent is the *negative class*. We tend to have really strong assumptions about classification already. For example, monitoring techniques using environmental DNA [*e.g.* @perl2022] are a classification problem: the species can be present or not, $y = \{+,-\}$, and the test can be positive of negative $\hat y = \{+,-\}$. We would be happy in this situation whenever $\hat y = y$, as it means that the test we use has diagnostic value. This is the essence of classification, and everything that follows is more precise ways to capture how close a test comes from this ideal scenario.

### Separability

A very important feature of the relationship between the features and the classes is that, broadly speaking, classification is much easier when the classes are separable. Separability (often linear separability) is achieved when, if looking at some projection of the data on two dimensions, you can draw a line that separates the classes (a point in a single dimension, a plane in three dimension, and so on and so forth). For reasons that will become clear in @sec-predictors-curse, simply adding more predictors is not the right thing to do.

In @fig-classification-separability, we can see the temperature (in degrees) for locations with recorded presences of Corsican nuthatches, and for locations with assumed absences. These two classes are not quite linearly separable alongside this single dimension (maybe there is a different projection of the data that would change this; we will explore one in @sec-predictors), but there are still some values at which our guess for a class changes. For example, at a location with a temperature colder than 10°C, presences are far more likely. For a location with a temperature warmer than 15°C, absences become overwhelmingly more likely. The locations with a temperature between 10°C and 15°C can go either way.

```{julia}
#| label: fig-classification-separability
#| echo: false
#| fig-cap: This figures show the separability of the presences (orange) and pseudo-absences (grey) on the temperature and precipitation dimensions.
f = Figure(; size=(6, 6).*(96/2))

gl = f[1,1] = GridLayout()

axtemp = Axis(gl[1,1])
c = vibrant[2]
density!(axtemp, 0.1filter(r -> r.presence, occdata).BIO1, color=(c, 0.3), strokecolor=c, strokewidth=1)
c = vibrant[1]
density!(axtemp, 0.1filter(r -> !r.presence, occdata).BIO1, color=(c, 0.3), strokecolor=c, strokewidth=1)

axprec = Axis(gl[2,2])
c = vibrant[2]
density!(axprec, filter(r -> r.presence, occdata).BIO12, color=(c, 0.3), strokecolor=c, strokewidth=1, direction=:y)
c = vibrant[1]
density!(axprec, filter(r -> !r.presence, occdata).BIO12, color=(c, 0.3), strokecolor=c, strokewidth=1, direction=:y)

axboth = Axis(gl[2,1], xlabel="Mean air temperature (°C)", ylabel = "Annual precipitation (kg m⁻²)")
xp = 0.1filter(r -> r.presence, occdata).BIO1
xn = 0.1filter(r -> !r.presence, occdata).BIO1
yp = filter(r -> r.presence, occdata).BIO12
yn = filter(r -> !r.presence, occdata).BIO12
c = vibrant[2]
scatter!(axboth, xp, yp, color=c, markersize=4, label="Presence")
c = vibrant[1]
scatter!(axboth, xn, yn, color=c, markersize=4, label="Pseudo-absence")

axislegend(position = :lb)

hidespines!(axtemp, :l, :r, :t)
hidespines!(axprec, :b, :r, :t)
hidedecorations!(axtemp, grid = true)
hidedecorations!(axprec, grid = true)
ylims!(axtemp, low = 0)
xlims!(axprec, low = 0)
colgap!(gl, 0)
rowgap!(gl, 0)

colsize!(gl, 1, Relative(5/6))
rowsize!(gl, 2, Relative(5/6))

current_figure()
```

### The confusion table

Evaluating the performance of a classifier (a classifier is a model that performs classification) is usually done by looking at its confusion table, which is a contingency table of the form

$$
\begin{pmatrix}
\text{TP} & \text{FP}\\
\text{FN} & \text{TN} 
\end{pmatrix} \,.
$$ {#eq-classification-confusion}

This can be stated as "counting the number of times each pair of (prediction, observation occurs)", like so:

$$
\begin{pmatrix}
|\hat +, +| & |\hat +, -|\\
|\hat -, +| & |\hat -, -| 
\end{pmatrix} \,.
$$ {#eq-classification-explain}

The four components of the confusion table are the true positives (TP; correct prediction of $+$), the true negatives (TN; correct prediction of $-$), the false positives (FP; incorrect prediction of $+$), and the false negatives (FN; incorrect prediction of $-$). Quite intuitively, we would like our classifier to return mostly elements in TP and TN: a good classifier has most elements on the diagonal, and off-diagonal elements as close to zero as possible (the proportion of predictions on the diagonal is called the accuracy, and we will spend @sec-classification-accuracy discussing why it is not such a great measure).

As there are many different possible measures on this matrix, we will introduce them as we go. In this section, it it more important to understand how the matrix responds to two important features of the data and the model: balance and bias.

Balance refers to the proportion of the positive class. Whenever this balance is not equal to 1/2 (there are as many positives as negative cases), we are performing *imbalanced* classification, which comes with additional challenges; few ecological problems are balanced.

### Null classifiers {#sec-classification-null}

A useful baseline to establish whether a model "works" is to measure whether the model performs better than at random. For classification problems, a good baseline is provided by "null" classifiers, in which the underlying structure of the data is known (and respects class balance), but the classifier itself makes guesses at random, for different definitions of random. Because these classifiers are very simple, they are not in fact models; we can directly write their confusion matrix, and apply different measures of model performance to it.

#### The no-skill classifier

There is a specific hypothetical classifier, called the *no-skill classifier*, which guesses classes at random as a function of their proportion. It turns out to have an interesting confusion matrix! If we note $b$ the proportion of positive classes, the no-skill classifier will guess $+$ with probability $b$, and $-$ with probability $1-b$. Because these are also the proportion in the data, we can write the confusion matrix as

$$
\begin{pmatrix}
b^2 & b(1-b)\\
(1-b)b & (1-b)^2 
\end{pmatrix} \,.
$$ {#eq-classification-noskill}

The proportion of elements that are on the diagonal of this matrix is $b^2 + (1-b)^2$. When $b$ gets lower, this value actually increases: the more difficult a classification problem is, the more accurate random guesses *look like*. This has a simple explanation, which we expand @sec-classification-accuracy : when most of the cases are negative, if you predict a negative case often, you will by chance get a very high true negative score. For this reason, measures of model performance will combine the positions of the confusion table to avoid some of these artifacts.

Bias refers to the fact that a model can recommend more (or fewer) positive or negative classes than it should. An extreme example is the *zero-rate classifier*, which will always guess the most common class, and which is commonly used as a baseline for imbalanced classification. A good classifier has high skill (which we can measure by whether it beats the no-skill classifier for our specific problem) and low bias. In this chapter, we will explore different measures on the confusion table the inform us about these aspects of model performance, using the Naive Bayes Classifier.

#### The coin-flip classifier

An alternative to the no-skill classifier is the coin-flip classifier, in which classes have their correct prevalence $b$, but the model picks at random with probability $1/2$ within these classes. This differs from the no-skill classifier by adopting a different random chance of picking a class while still respecting the prevalence of the positive class.

The confusion matrix of the coin-flip classifier is:

$$
\begin{pmatrix}
\frac{b}{2} & \frac{1-b}{2}\\
\frac{b}{2} & \frac{1-b}{2}
\end{pmatrix} \,.
$$

#### The constant classifier

The last null classifier we can use is the constant classifier, in which we assume that the model will *always* return some specific class. This is useful to anticipate what the model performance would look like if, for example, the model always predicted the negative outcome (which is a notion we will return to in @sec-classification-accuracy).

This classifier has the confusion matrix

$$
\begin{pmatrix}
b & 1-b\\
0 & 0
\end{pmatrix}
$$

if it always predicts the positive class, and

$$
\begin{pmatrix}
0 & 0\\
b & 1-b
\end{pmatrix}
$$

if it always predicts the negative class.

### A note on accuracy {#sec-classification-accuracy}

It is tempting to use accuracy to measure how good a classifier is, because it makes sense: it quantifies how many predictions are correct. But a good accuracy can hide a very poor performance. Let's think about an extreme case, in which we want to detect an event that happens with prevalence $0.05$. Out of 100 predictions, the confusion matrix of this model would be

$$
\begin{pmatrix}
0 & 0 \\ 5 & 95
\end{pmatrix} \,.
$$

The accuracy of this classifier would be $0.95$, which seems extremely high! This is because prevalence is extremely low, and so most of the predictions are about the negative class: the model is *on average* really good, but is completely missing the point when it comes to making interesting predictions.

In fact, even a classifier that would not be that extreme would be mis-represented if all we cared about was the accuracy. If we take the case of the no-skill classifier, the accuracy is given by $b^2 + (1-b)^2$, which is an inverted parabola that is *maximized* for $b \approx 0$ -- a model guessing at random will appear better when the problem we want to solve gets more difficult.

::: column-margin
Whenever possible, avoid using accuracy except to communicate the skill of the model in easy to understand terms.
:::

This is an issue inherent to accuracy: it can tell you that a classifier is bad (when it is low), but it cannot really tell you when a classifier is *good*, as no-skill (or worse-than-no-skill) classifiers can have very high values. It remains informative as an *a posteriori* measure of performance, but only after using reliable measures to ensure that the model means something.

More generally, this also illustrates why relying on null classifiers is a good idea: we want to make sure that we are making better predictions than an heavily biased, uninformative model would.

## The Naive Bayes Classifier

::: column-margin
In practice, we do not use the Naive Bayes Classifier for SDMs. There are far more powerful alternatives based on boosting, like boosted regression trees, or Bayesian additive regression trees. But NBC makes for an easy to follow example across many chapters.
:::

The Naive Bayes Classifier (NBC) is my all-time favorite classifier. It is built on a very simple intuition, works with almost no data, and more importantly, often provides an annoyingly good baseline for other, more complex classifiers to meet. That NBC works *at all* is counter-intuitive [@hand2001]. It assumes that all variables are independent, it works when reducing the data to a simpler distribution, and although the numerical estimate of the class probability can be somewhat unstable, it generally gives good predictions. NBC is the data science equivalent of saying "eh, I reckon it's probably *this* class" and somehow getting it right 95% of the time. There are, in fact, several papers questioning *why* NBC works *at all* [see *e.g.* @kupervasser2014].

### How the NBC works

In @fig-classification-separability, what is the most likely class if the temperature is 8°C?

We can look at the density traces on top, and say that because the one for presences is higher, we would be justified in guessing that the species is present. Of course, this is equivalent to saying that $P(8^\circ C | +) > P(8^\circ C | -)$. It would appear that we are looking at the problem in the wrong way, because we are really interested in $P(+ | 8^\circ C)$, the probability that the species is present knowing that the temperature is 8°C.

Using Baye's theorem, we can re-write our goal as

$$
P(+|x) = \frac{P(+)}{P(x)}P(x|+) \,,
$$ {#eq-nbc-onevar}

where $x$ is one value of one feature, $P(x)$ is the probability of this observation (the evidence, in Bayesian parlance), and $P(+)$ is the probability of the positive class (in other words, the prior). So, this is where the "Bayes" part comes from.

But why is NBC naive?

In @eq-nbc-onevar, we have used a single feature $x$, but the problem we want to solve uses a vector of features, $\mathbf{x}$. These features, statisticians will say, will have covariance, and a joint distribution, and many things that will challenge the simplicity of what we have written so far. These details, NBC says, are meaningless.

NBC is naive because it makes the assumptions that the features are all independent. This is actually the foundation upon which the NBC is built. To express the assumption of features independence, we simply need to write that $P(+|\mathbf{x}) \propto P(+)\prod_i P(\mathbf{x}_i|+)$ (by the chain rule). Note that this is not a strict equality: to get the actual value of $P(+|\mathbf{x})$ we need to divide by the evidence, and so we need to find the expression of the evidence. But instead of doing this, we simply have to note that the evidence is constant across all classes, and so we do not need to measure it to get an estimate of the score for a class. We can think of this assumption in a problem-specific way: if we walk across a landscape at random with regard to our response variable, *i.e.* we do not know whether the species will be present or not, there is (i) no reason to assume that the probability of measuring a specific temperature (or other feature) will be linked to the response in any way, and (ii) no reason to assume that a third, mysterious value that is neither presence nor absence could ever be measured; therefore, $P(\mathbf{x})$ is a constant for our model.

To generalize our notation, the score for a class $\mathbf{c}_j$ is $P(\mathbf{c}_j)\prod_i P(\mathbf{x}_i|\mathbf{c}_j)$. In order to decide on a class, we apply the following rule:

$$
\hat y = \text{argmax}_j \, P(\mathbf{c}_j)\prod_i P(\mathbf{x}_i|\mathbf{c}_j) \,.
$$ {#eq-nbc-decision}

In other words, whichever class gives the higher score, is what the NBC will recommend for this instance $\mathbf{x}$. In @sec-tuning, we will improve upon this model by thinking about (and eventually calculating) the evidence $P(\mathbf{x})$ in order to estimate the actual probability, but as you will see, this simple formulation will already prove frightfully effective.

### How the NBC learns

There are two unknown quantities at this point. The first is the value of $P(+)$ and $P(-)$. These are priors, and are presumably important to pick correctly. In the spirit of iterating rapidly on a model, we can use two starting points: either we assume that the classes have the same probability, or we assume that the representation of the classes (the balance of the problem) *is* their prior. It now helps to think about the no-skill and coin-flip classifier we introduced earlier in the chapter. Assume that we do not use $P(x|c)$ when making our prediction: the baseline against which we compare the model will therefore be entire determined by $P(+)$. Picking a prior of one half is making the predictions at random (like coin-flip), and picking a prior equal to the prevalence is making the predictions at random (like no-skill). Understanding how we set the prior for the NBC is important, as it can ensure that we use a fair baseline to compare it against. Throughout this book, we will let our prior be the prevalence in the training data (and therefore our first task will be to beat the no-skill classifier). Finally, note that we do not need to think about $P(-)$ too much, as it is simply $1-P(+)$: the "state" of every single observation of the presence or absence of the species under a set of measured environmental variables is either $+$ or $-$.

The most delicate problem is to figure out $P(x|c)$, the probability of the observation of the variable when the class is known. There are variants here that will depend on the type of data that is in $x$; as we work with continuous variables, we will rely on Gaussian NBC. In Gaussian NBC, we will consider that $x$ comes from a normal distribution $\mathcal{N}(\mu_{x,c},\sigma_{x,c})$, and therefore we simply need to evaluate the probability density function of this distribution at the point $x$. Other types of data are handled in the same way, with the difference that they use a different set of distributions; for example, categorical variables can be represented using multinomial distributions [@abbood2020].

::: column-margin
We could use different approaches to NBC, by using (for example) the empirical CDF function of the training data for each class. We will revisit this idea in chapter @sec-squint, as it establishes an interesting parallel between different methods.
:::

Therefore, the learning stage of NBC is extremely quick: we take the mean and standard deviation of the values, split by predictor and by class, and these are the parameters of our classifier. By contrast to the linear regression approach we worked with in @sec-gradientdescent, the learning phase only involves a single epoch: measuring the mean and standard deviation. This yields a Gaussian NBC with the assumption that variables are normally distributed, because the normal distribution is the maximal entropy distribution when we know these two moments. This also reveals an interesting feature of NBC: it can work when we do not have access to the underlying training data. Imagine a situation where we only have access to published summary statistics about the environmental variables for which the species was observed / not observed: we can use these to establish the Normal distributions for each feature for each class, and use the NBC. Its ability to work under extreme data scarcity (assuming we are comfortable with the assumptions about the shape of the distribution) makes NBC a surprisingly versatile classifier.

## Application: a baseline model of the Corsican nuthatch

In this section, we will have a look at the temperature and precipitation data from @fig-classification-separability, and come up with a first version of our classifier, which is to say: we will train our first attempt at an ecological niche model for the Corsican nuthatch.

### Training and validation strategy

To evaluate our model, as we discussed in @sec-crossvalidation, we will keep a holdout testing set, that will be composed of 20% of the observations. In this chapter, we will not be using these data, because in order to use them as a stand-in for future predictions, it is important that the model only sees them once (this will happen at the end of @sec-tuning). Therefore, for the next chapters, we will limit ourselves to an evaluation of the model performance based on the average values of the performance measure we picked as the most informative, calculated on the validation datasets. When, based on this criteria, we have identified and validated the best model, we will evaluate it on the testing data.

In this chapter, we will rely on Monte-Carlo cross validation (MCCV; see @sec-crossvalidation-montecarlo), using 100 replicates. In the following chapters, we will revert to using k-folds cross-validation, but using MCCV here is a good enough starting point.

In order to see how good our model really is, we will also compare its performances to the no-skill classifier. This is almost never a difficult classifier to outperform, but this nevertheless provides a good indication of whether our model works *at all*. In @sec-squint, we will introduce a slightly more domain-specific model to provide a baseline that would look like an actual model we would like to out-perform (but mostly to make the general point that any problem can be approached like a machine learning problem).

```{julia}
#| echo: false
#| output: false
Cnoskill = noskill(y)
Cflip = coinflip(y)
Cpos = constantpositive(y)
Cneg = constantnegative(y)
folds = montecarlo(y, X; n=100)
model = SDM(RawData(), NBC(), 0.5, X, y, [1, 12])
Cv, Ct = crossvalidate(model, folds)
```

### Performance evaluation of the model

In order to get a sense of the performance of our model, we will need to decide on a performance measure. This is an important step, as we will use the average value of this measure on the validation data to decide on the best model *before* reporting the expected performance. If we pick a measure that is biased, we will therefore use a model that is biased. Following @chicco2020 and @Jurman2012, we will use the Matthew's Correlation Coefficient (MCC) as the "main" measure to evaluate the performance of a model (we will return to other alternative measures in @sec-tuning, and eventually explain why MCC is the most appropriate for classification evaluation).

The MCC is defined as

$$
\frac{\text{TP}\times \text{TN} - \text{FP}\times \text{FN}}{\sqrt{(\text{TP}+\text{FP})\times (\text{TP}+\text{FN})\times (\text{TN}+\text{FP})\times (\text{TN}+\text{FN})}} \,.
$$

The MCC is a correlation coefficient. Specifically, it is the Pearson product-moment correlation on a contingency table, where the contingency table is the confusion matrix [@powers2020]. Therefore, it returns values in $[-1, 1]$, which can be interpreted as every other correlation value. A negative value indicates perfectly wrong predictions, a value of 0 indicates no-skill, and a value of 1 indicates perfect predictions. By picking the model with the highest MCC on the validation data, we are likely to pick the best possible model (after controlling for over-fitting).

In addition to reporting the MCC, we will also look at values that inform us on the type of biases in the model, namely the positive and negative predictive values. These values, respectively $\text{TP}/(\text{TP}+\text{FP})$ and $\text{TN}/(\text{TN}+\text{FN})$, measure how likely a prediction of, respectively, presence and absence, are. To put it in other words, they measure how much the "true" events are represented in all of the predictions for a given even type: a PPV value of 0.7 means that 7 out of 10 positive predictions were true positives. These range in $[0,1]$, and values of one indicate a better performance of the model. It may help to sometimes talk about the falses predictions, in which case the false omission rate (1 - NPV) and false discovery rate (1 - PPV) can be used: they quantify the *risk* we take when acting on a positive or negative recommendation from the model.

Why not pick one of these instead of the MCC? Because all modeling is compromise; we don't want a model to become too good at predicting absences, to the point where prediction about presences would become meaningless. Selecting models on the basis of a measure that only emphasizes one outcome is a risk that we shouldn't be willing to take. For this reason, measures that are good at optimizing the value of a negative and a positive prediction are far better representations of the performance of a model. The MCC does just this.

```{julia}
#| label: fig-classification-crossvalidation
#| echo: false
#| fig-cap: Overview of the scores for the Matthew's correlation coefficient, as well as the positive and negative predictive values.
fmat = [(mcc, "Matthew's corr. coeff.") (ppv, "Positive pred. val.") (npv, "Negative pred. val.")]
f = Figure(; size=(7, 4).*(96/2))

for ci in CartesianIndices(fmat)
    cfunc, lab = fmat[ci]
    ax = Axis(f[ci.I...]; xlabel=lab)
    trv = cfunc.(Ct)
    vav = cfunc.(Cv)
    cx = vcat(fill(0, length(trv)), fill(1, length(vav)))
    cy = vcat(trv, vav)
    boxplot!(ax, cx, cy; orientation=:vertical, color = map(d->d==1 ? muted[1] : muted[2], cx))
    hidexdecorations!(ax, label=false)
    ylims!(ax, 0.6, 1.0)
end

group_color = [PolyElement(color = color, strokecolor = :transparent)
    for color in muted[1:2]]
Legend(f[2,:], group_color, ["Training", "Validation"]; orientation=:horizontal)

current_figure()
```

The output of cross-validation is given in @fig-classification-crossvalidation (and compared to the no-skill classifier in @tbl-classification-crossvalidation). As we are satisfied with the model performance, we can re-train it using all the data (*but not the part used for testing*) in order to make our first series of predictions.

```{julia}
#| echo: false
#| output: asis
#| label: tbl-classification-crossvalidation
#| tbl-cap: Overview of the data presented in @fig-classification-crossvalidation, compared to the null classifiers from @sec-classification-null. Note that the MCC gives values of 0 for *most* null classifiers, which is not the case with other measures of performance. Missing values cannot be calculated as they involved a denominator of 0.
measures = [
    "Accuracy" => accuracy,
    "NPV" => npv,
    "PPV" => ppv,
    "MCC" => mcc
    ]

content = Vector[]
for (k, v) in measures
    push!(content,
    [
        k,
        mean(v.(Ct)), mean(v.(Cv)),
        v(Cnoskill), v(Cflip), v(Cpos), v(Cneg)
    ])
end

T = permutedims(hcat(content...))
T[findall(t -> t isa Float64 ? isnan(t) : false, T)] .= ""

pretty_table(
    T;
    backend = Val(:markdown),
    header = ["Measure", "Training", "Validation", "No-skill", "Coin-flip", "Positive", "Negative"],
    alignment = [:c, :l, :l, :l, :l, :l, :l],
    formatters = ft_printf("%5.2f", 2:7)
)
```

### The decision boundary

```{julia}
#| echo: false
#| output: false
train!(model; threshold=false)
air = LinRange(extrema(occdata.BIO1)..., 250)
prc = LinRange(extrema(occdata.BIO12)..., 250)
SRF = zeros(Float64, (length(air), length(prc)))
for i in axes(air, 1)
    for j in axes(prc, 1)
        mck = zeros(19)
        mck[1] = air[i]
        mck[12] = prc[j]
        SRF[i,j] = predict(model, mck)
    end
end
```

Now that the model is trained, we can take a break in our discussion of its performance, and think about *why* it makes a specific classification in the first place. Because we are using a model with only two input features, we can generate a grid of variables, and the ask, for every point on this grid, the classification made by our trained model. This will reveal the regions in the space of parameters where the model will conclude that the species is present.

```{julia}
#| label: fig-classification-decision
#| echo: false
#| fig-cap: Overview of the decision boundary between the positive (orange) and negative (grey) classes using the NBC with two variables. Note that, as expected with a Gaussian distribution, the limit between the two classes looks circular. The assumption of statistical independance between the features means that we would not see, for example, an ellipse.
f = Figure(; size=(6, 6).*(96/2))
ax = Axis(f[1,1], xlabel="Mean air temperature (°C)", ylabel = "Annual precipitation (kg m⁻²)")
pal = vibrant[[1,2]]
heatmap!(ax, 0.1air, prc, SRF, colormap=pal, alpha=0.3)
xp = 0.1filter(r -> r.presence, occdata).BIO1
xn = 0.1filter(r -> !r.presence, occdata).BIO1
yp = filter(r -> r.presence, occdata).BIO12
yn = filter(r -> !r.presence, occdata).BIO12
c = vibrant[2]
scatter!(ax, xp, yp, color=c, markersize=4, label="Presence")
c = vibrant[1]
scatter!(ax, xn, yn, color=c, markersize=4, label="Pseudo-absence")
current_figure()
```

The output of this simulation is given in @fig-classification-decision. Of course, in a model with more features, we would need to adapt our visualisations, but because we only use two features here, this image actually gives us a complete understanding of the model decision process. Think of it this way: even if we lose the code of the model, we could use this figure to classify any input made of a temperature and a precipitation, and read what the model decision would have been.

::: column-margin
Take a minute to think about which places are more likely to have lower temperatures on an island. Is there an additional layer of geospatial information we could add that would be informative?
:::

The line that separates the two classes is usually referred to as the "decision boundary" of the classifier: crossing this line by moving in the space of features will lead the model to predict another class at the output. In this instance, as a consequence of the choice of models and of the distribution of presence and absences in the environmental space, the decision boundary is not linear.

It is interesting to compare @fig-classification-decision with, for example, the distribution of the raw data presented in @fig-classification-separability. Although we initially observed that temperature was giving us the best chance to separate the two classes, the shape of the decision boundary suggests that our classifier is considering that Corsican nuthatches enjoy colder climates with more rainfall.

### Visualizing the trained model

```{julia}
#| echo: false
#| output: false
_layer_path = joinpath(dirname(Base.active_project()), "data", "general", "layers.tiff")
bio = [SpeciesDistributionToolkit._read_geotiff(_layer_path, SimpleSDMResponse; bandnumber=i) for i in 1:19]
pr = predict(model, bio; threshold=true)
```

We can now go through all of the pixels in the island of Corsica, and apply the model to predict the presence of *Sitta whiteheadi*. This result is reported in @fig-classification-range. Because we have used training data for which we know the labels, we can also map the *outcome* of applying the model, which is to say: where are the false/true negative/positive predictions. The model seems to be making a series of false positive predictions in the northernmost part of Corsica, which may suggest that we are missing predictors relevant to this area that would refine the prediction of the suitability of the habitat.

```{julia}
#| label: fig-classification-range
#| echo: false
#| fig-cap: Occurence data (left; presences are in orange and pseudo-absences in black), prediction of presences in space under the two-variables model (middle), with the four blocks of the confusion matrix also mapped. As we could have anticipated from the high values of the MCC, even this simple model does an adequate job at predicting the presence of *Sitta whiteheadi*, but would definitely stand to be improved, possibly by accounting for more features.
f = Figure(; size=(7, 6).*(96/2))

gl = f[1, 1] = GridLayout()

ax0 = Axis(
    gl[1, 1];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "Training data",
)
ax1 = Axis(
    gl[1, 2];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "True positives",
)
ax2 = Axis(
    gl[1, 3];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "False positives",
)
ax3 = Axis(
    gl[2, 1];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "Prediction",
)
ax4 = Axis(
    gl[2, 2];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "False negatives",
)
ax5 = Axis(
    gl[2, 3];
    xlabel = "Longitude",
    ylabel = "Latitude",
    aspect = DataAspect(),
    title = "True negatives",
)

heatmap!(ax3, pr; colormap = vibrant[1:2])

heatmap!(ax0, pr; colormap = [light[1]])
scatter!(
    ax0,
    coordinates.longitude[trn],
    coordinates.latitude[trn];
    color = coordinates.presence[trn],
    colormap = [:black, vibrant[2]],
    markersize = 2,
)

heatmap!(ax2, pr; colormap = [light[1]])
prd = predict(model, X; threshold = true)
grd = coordinates.presence[trn]

TP = findall(prd .& grd)
TN = findall((.!prd) .& (.!grd))
FP = findall(prd .& (.!grd))
FN = findall((.!prd) .& grd)

heatmap!(ax1, pr; colormap = vibrant[1:2], alpha = 0.4)
scatter!(ax1, latlon[TP, 2], latlon[TP, 1]; markersize = 2, color = vibrant[2])

heatmap!(ax2, pr; colormap = vibrant[1:2], alpha = 0.4)
scatter!(ax2, latlon[FP, 2], latlon[FP, 1]; markersize = 3, color = :black, marker = :cross)

heatmap!(ax4, pr; colormap = vibrant[1:2], alpha = 0.4)
scatter!(
    ax4,
    latlon[FN, 2],
    latlon[FN, 1];
    markersize = 3,
    color = vibrant[2],
    marker = :cross,
)

heatmap!(ax5, pr; colormap = vibrant[1:2], alpha = 0.4)
scatter!(ax5, latlon[TN, 2], latlon[TN, 1]; markersize = 2, color = :black)

for ax in [ax0, ax1, ax2, ax3, ax4, ax5]
    ax.xticklabelpad = 0
    ax.yticklabelpad = 0
    hidedecorations!(ax)
    hidespines!(ax)
end

colgap!(gl, 0)
rowgap!(gl, 10)

current_figure()
```

### What is an acceptable model?

When comparing the prediction to the spatial distribution of occurrences (@fig-classification-range), it appears that the model identifies an area in the northeast where the species is likely to be present, despite limited observations. This might result in more false positives, but this is the *purpose* of running this model -- if the point data were to provide us with a full knowledge of the range, there would be no point in running the model. For this reason, it is very important to nuance our interpretation of what a false-positive prediction really is. We will get back to this discussion in the next chapters, when adding more complexity to the model. For now, we have established a basic training routine for our model, and have started thinking spatially about *where* it is making errors (in space).

Note that by visualizing the type of mis-classification from our training set, we gain a better understanding of *how* the model is wrong. False positives, for example, tends to be clustered either at the western margin of the main patch of the predicted range, and in a small number of clusters in the North. False negatives are also fairly close to the edge of the predicted range, but clustered towards the center of the island. This is a good sign! The errors that our model is making appear to be mostly at the margin of the habitat of the species, which we know (ecologically) is more difficult to properly map out.

```{julia}
#| echo: false
#| output: false
modelpath = joinpath(_models_path, "sdm-baseline.json")
writesdm(modelpath, model)
```

## Conclusion

In this chapter, we introduced the Naive Bayes Classifier as a model for classification, and applied it to a data of species occurrence, in which we predicted the potential presence of the species using temperature and precipitation. Through cross-validation, we confirmed that this model gave a good enough performance (@fig-classification-crossvalidation), looked at the decisions that were being made by the trained model (@fig-classification-decision), and finally mapped the prediction and their associated errors in space (@fig-classification-range). Based on this information, we concluded that the model was a reasonable first approximation of where *Sitta whiteheadi* can be present. In the next chapter, we will improve upon this model by looking at techniques to select and transform variables.