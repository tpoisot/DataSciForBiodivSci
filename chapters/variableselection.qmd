---
engine: julia
---

# Variable preparation {#sec-predictors}

In @sec-classification, we introduced a simple classifier trained on a dataset of presence and pseudo-absences of a species (*Sitta whiteheadi*), which we predicted using the mean annual temperature as well as the annual total precipitation. This choice of variables was motivated by our knowledge of the fact that most species tend to have some temperature and precipitation they are best suited to. But we can approach the exercise of selecting predictive variables in a far more formal way, and this will form the core of this chapter. Specifically, we will examine two related techniques: variable selection, and feature engineering.

There are two reasons to think about variable selection and feature engineering -- first, the variables we have may not all be predictive for the specific problem we are trying to solve; second, the variables may not be expressed in the correct "way" to solve our problem. This calls for a joint approach of selecting and transforming features. Before we do anything to our features (transformation or selection), we need to talk about data leakage.

## The problem: optimal set of BioClim variables for the Corsican nuthatch

```{julia}
#| echo: false
#| output: false
_code_path = joinpath(dirname(Base.active_project()), "lib")
include(joinpath(_code_path, "pkg.jl"))
include(joinpath(_code_path, "confusion.jl"))
include(joinpath(_code_path, "mocks.jl"))
include(joinpath(_code_path, "nbc.jl"))
include(joinpath(_code_path, "vif.jl"))
include(joinpath(_code_path, "splitters.jl"))
include(joinpath(_code_path, "palettes.jl"))
include(joinpath(_code_path, "crossvalidate.jl"))
include(joinpath(_code_path, "variableselection.jl"))
```

The BioClim suite of environmental variables are 19 measurements derived from monthly recordings of temperature and precipitation. They are widely used in species distribution modeling, despite some spatial discontinuities due to the methodology of their reconstruction [@booth2022]; this is particularly true when working from the WorldClim version [@fick2017], and not as problematic when using other data products like CHELSA [@karger2017].

The definitions of the 19 BioClim variables are given in @tbl-predictors-bioclim. As we can see from this table, a number of variables are either derived from the same months, or direct (even sometimes additive) combinations of one another. For this reason, and because there are 19 variables, this is a good dataset to evaluate the use of variable selection and transformation.

```{julia}
#| echo: false
#| output: asis
#| label: tbl-predictors-bioclim
#| tbl-cap: List of the 19 BioClim variables, including indications of their calculation. The model we used in @sec-classification used BIO1 and BIO12.
provider = RasterData(CHELSA1, BioClim)

content = Matrix{String}(undef, length(layers(provider)), 3)

for (i,l) in enumerate(layers(provider))
    value = layerdescriptions(provider)[l]
    vparts = split(value, "("; limit=2)
    desc = ""
    if length(vparts) == 2
        desc = "("*vparts[2]
        if ~contains(desc, "BIO")
            desc = desc[2:end-1]
        end
    end
    content[i,1] = "$i"
    content[i,2] = vparts[1]
    content[i,3] = desc
end

pretty_table(
    content;
    backend = Val(:markdown),
    header = ["Layer", "Description", "Details"],
    alignment = [:c, :l, :r]
)
```

In this chapter, we will try to improve the model introduced in @sec-classification, by evaluating different methods to prepare our predictor variables.

## What is data leakage? {#sec-leakage}

Data leakage is a concept that is, if you can believe it, grosser than it sounds.

The purpose of this section is to put the fear of data leakage in you, because it can, and most assuredly *will*, lead to bad models, which is to say (as we discussed in @sec-gradientdescent-trainedmodel), models that do not adequately represent the underlying data, in part because we have built-in some biases into them. In turn, this can eventually lead to decreased explainability of the models, which erodes trust in their predictions [@amarasinghe2023]. As illustrated by @stock2023, a large number of ecological applications of machine learning are particularly susceptible to data leakage, meaning that this should be a core point of concern for us.

### Consequences of data leakage {#sec-leakage-consequences}

We take data leakage so seriously because it is one of the top ten mistakes in applied machine learning [@nisbet2018]. Data leakage happens information "leaks" from the training conditions to the evaluation conditions; in other words, when the model is evaluated after mistakenly being fed information that would not be available in real-life situations. Note that this definition of leakage is different from another notion, namely the loss of data availability over time [@Peterson2018].

It is worth stopping for a moment to consider what these "real-life situations" are, and how they differ from the training of the model. Most of this difference can be summarized by the fact that when we are *applying* a model, we can start from the model *only*. Which is to say, the data that have been used for the training and validation of the model may have been lost, without changing the applicability of the model: it works on entirely new data. We have discussed this situation in @sec-crossvalidation-testing: the test of a model is conducted on data that have never been used for training, because we want to evaluate its performance in the conditions where it will be applied.

Because this is the behavior we want to simulate with a validation dataset, it is very important to fully disconnect the testing data from the rest of the data. We can illustrate this with an example. Let's say we want to work on a time series of population size, such as provided by the *BioTIME* project [@dornelas2018]. One na√Øve approach would be to split this the time series at random into three datasets. We can use one to train the models, one to validate these models, and a last one for testing.

Congratulations! We have created data leakage! Because we are splitting our time series at random, the model will likely have been trained using data that date from *after* the start of the validation dataset. In other words: our model can peek into the future. This is highly unlikely to happen in practice, due to the laws of physics. A strategy that would prevent leakage would have been to pick a cut-off date to define the validation dataset, and then to decide how to deal with the training and testing sets.

### Avoiding data leakage {#sec-leakage-avoid}

The most common advice given in order to prevent data leakage is the "learn/predict separation" [@kaufman2011]. Simply put, this means that whatever happens to the data used for training cannot be *simultaneously* applied to the data used for testing (or validation).

::: content-margin
A counter-example where performing the transformation *before* the analysis is when the transformation is explicitly sought out as an embedding, where we want to predict the position of instances in the embedded space, as in *.e.g.* @runghen2022.
:::

Assume that we want to transform our data using a Principal Component Analysis (PCA; @pearson1901). Ecologists often think of PCA as a technique to explore data [@legendre2012], but it is so much more than that! PCA is a model, because we can derive, from the data, a series of weights (in the transformation matrix), which we can then apply to other datasets in order to project them in the space of the projection of the training data.

If we have a dataset $\mathbf{X}$, which we split into two components $\mathbf{X}_0$ for training ,and $\mathbf{X}_1$ for validation, there are two ways to use a PCA to transform these data. The first is $\mathbf{T} = \mathbf{X}\mathbf{W}$, which uses the full dataset. When we predict the position of the validation data, we could use the transformation $\mathbf{T}_1 = \mathbf{X}_1\mathbf{W}$, but this would introduce data leakage: we have trained the transformation we apply to $\mathbf{X}_1$ using data that are already in $\mathbf{X}_1$, and therefore we have not respected the learn/predict separation. This way to introduce data leakage is extremely common in the species distribution literature [see *e.g.* @demarco2018].

![Overview of a data transformation pipeline that introduces data leakage (left), or that does not introduce data leakage (right). In both cases, a transformation such as a PCA is applied to the data; in the example on the right, it is applied as part of the model, and can therefore be applied without breaking the train/predict separation. The pipeline on the left introduces data leakage, as the training data will be changed by information contained in the validation data.]

  [Overview of a data transformation pipeline that introduces data leakage (left), or that does not introduce data leakage (right). In both cases, a transformation such as a PCA is applied to the data; in the example on the right, it is applied as part of the model, and can therefore be applied without breaking the train/predict separation. The pipeline on the left introduces data leakage, as the training data will be changed by information contained in the validation data.]: ../diagrams/data-leakage.png {#fig-predictors-leakage}

The second (correct) way to handle this situation is to perform our PCA using $\mathbf{T}_0 = \mathbf{X}_0\mathbf{W}_0$, which is to say, the weights of our PCA are derived *only* from the training data. In this situation, whenever we project the data in the validation set using $\mathbf{T}_1 = \mathbf{X}_1\mathbf{W}_0$, we respect the learn/predict separation: the transformation of $\mathbf{X}_1$ is entirely independent from the data contained in $\mathbf{X}_1$. This is illustrated in @fig-predictors-leakage.

#### How to work in practice?

Although avoiding data leakage is a tricky problem, there is a very specific mindset we can adopt that goes a long way towards not introducing it in our analyses, and it is as follows: *every data transformation step is a modeling step that is part of the learning process*. We do not, for example, apply a PCA and train the model on the projected variables -- we feed raw data into a model, the first step of which is to perform this PCA for us.

This approach works because everything that can be represented as numbers is a model that can be trained.

If you want to transform a variable using the z-score, this is a model! It has two parameters that you can learn from the data, $\mu$ (the average of the variable) and $\sigma$ (its standard deviation). You can apply it to a data point $y$ with $\hat y = (y - \mu)\sigma^{-1}$. Because this is a model, we need a dataset to learn these parameters from, and because we want to maintain the learn/predict separation, we will use the train dataset to get the values of $\mu_0$ and $\sigma_0$. This way, when we want to get the z-score of a new observation, for example from the testing dataset, we can get it using $\hat y_1 = (y_1 - \mu_0)\sigma_0^{-1}$. The data transformation is entirely coming from information that was part of the training set.

One way to get the learn/predict transformation stupendously wrong is to transform our validation, testing, or prediction data using $\hat y_1 = (y_1 - \mu_1)\sigma_1^{-1}$. This can be easily understood with an example. Assume that the variable $y_0$ is the temperature in our training dataset. We are interested in making a prediction in a world that is 2 degrees hotter, uniformly, which is to say that for whatever value of $y_0$, the corresponding data point we use for prediction is $y_1 = y_0 + 2$. If we take the z-score of this new value based on its own average and standard deviation, a temperature two degrees warmer in the prediction data will have the same z-score as its original value, or in other words, we have hidden the fact that there is a change in our predictors!

Treating the data preparation step as a part of the learning process, which is to say that we learn every transformation on the training set, and retain this transformation as part of the prediction process, we are protecting ourselves against both data leakage *and* the hiding of relevant changes in our predictors.

## Variable selection

### The curse of dimensionality {#sec-predictors-curse}

The number of variables we use for prediction is the number of dimensions of a problem. It would be tempting to say that adding dimensions should improve our chances to find a feature alongside which the classes become linearly separable. If only!

The "curse of dimensionality" is the common term of everything breaking down when the dimensions of a problem increase. In our perspective, where we rely on the resemblance between features to make a prediction, increasing the dimensions of a problem means adding features, and it has important consequences on the distance between observations. Picture two points positioned at random on the unit interval: the average distance between them is 1/3. If we add one dimension, keeping two points but turning this line into a cube, the average distance would be about 1/2. For a cube, about 2/3. For $n$ dimensions, we can figure out that the average distance grows like $\sqrt{n/6 + c}$, which is to say that when we add more dimensions, we make the average distance between two points go to infinity. This effect is also affecting ecological studies [*e.g.* @smith2017].

Therefore, we need to approach the problem of "which variables to use" with a specific mindset: we want a lot of information for our model, but not so much that the space in which the predictors exist turns immense. There are techniques for this.

### Step-wise approaches to variable selection

In order to try and decrease the dimensionality of a problem, we can attempt to come up with a method to decide which variables to include, or to remove, from a model. This practice is usually called "stepwise" selection, and is the topic of *intense* debate in ecology, although several studies point to the fact that there is rarely a best technique to select variables [@murtaugh2009], that the same data can usually be adequately described by competing models [@whittingham2006], and that classifiers can show high robustness to the inclusion of non-informative variables [@fox2017]. Situations in which variable selection has been shown top be useful is the case of model transfer [@petitpierre2016], or (when informed by ecological knowledge), the demonstration that classes of variables had no measurable impact on model performance [@thuiller2004].

Why, so, should we select the variables we put in our models?

The answer is simple: we seek to solve a specific problem in an optimal way, where "optimal" refers to the maximization of a performance measure we decided upon *a priori*. In our case, this is the MCC. Therefore, an ideal set of predictors is the one that, given our cross-validation strategy, maximizes our measure of performance.

### Forward selection

In forward selection, assuming that we have $f$ features, we start by building $f$ models, each using one feature. For example, using the BioClim variables, $m_1$ would be attempting to predict presences and absences based only on temperature. Out of these models, we retain the variable given by $\text{argmax}_f \text{MCC}(m_f)$, where $\text{MCC}(m_f)$ is the average value of MCC for the $f$-th model on the validation datasets. This is the first variable we add to our set of selected variables. We then train $f-1$ models, and then again add the variable that leads to the best possible *increase* in the average value of the MCC. When we cannot find a remaining variable that would increase the performance of the model, we stop the process, and return the optimal set of variables. Forward selection can be constrained by, instead of starting from variables one by one, starting from a pre-selected set of variables that will always be included in the model.

There are two important things to consider here. First, the set of variables is only optimal under the assumptions of the stepwise selection process: the first variable is the one that boosts the predictive value of the model the most *on its own*, and the next variables *in the context of already selected variables*. Second, the variables are evaluated on the basis of their ability to *improve the performance of the model*; this does not imply that they are relevant to the ecological processes happening in the dataset. Infering mechanisms on the basis of variable selection is foolish [@tredennick2021].

### Backward selection

The opposite of forward selection is backward selection, in which we start from a complete set of variables, then remove the one with the *worst* impact on model performance, and keep proceeding until we cannot remove a variable without making the model worse. The set of variables that remain will be the optimal set of variables. In almost no cases will forward and backward selection agree on which set of variables is the best -- we have to settle this debate by either picking the model with the least parameters (the most parsimonious), or the one with the best performance.

Why not evaluate all the combination of variables?

Keep in mind that we do not know the number of variables we should use; therefore, for the 19 BioClim variables, we would have to evaluate $\sum_f \binom{19}{f}$, which turns out to be an *immense* quantity (for example, $\binom{19}{9}=92378$). For this reason, a complete enumeration of all variable combinations would be extremely wasteful.

### Removal of colinear variables

Co-linearity of variables is challenging for all types of ecological models [@graham2003]. In the case of species distribution models [@demarco2018], the variables are expected to be strongly auto-correlated, both because they have innate spatial auto-correlation, and because they are derived from a smaller set of raw data [@dormann2012]. For this reason, it is a good idea to limit the number of colinear variables. In the BioClim variables, there

## Multivariate transformations

### PCA-based transforms

Principal Component Analysis (PCA) is one of the most widely used multi-variate techniques in ecology, and is a very common technique to prepare variables in applied machine learning. One advantage of PCA is that it serves both as a way to remove colinearity, in that the principal components are orthogonal, and as a way to reduce the dimensionality of the problem as long as we decide on a threshold on the proportion of variance explained, and only retain the number of principal components needed to reach this threshold. For applications where the features are high-dimensional, PCA is a well established method to reduce dimensionality *and* extract more information in the selected principal components [@howley2005]. In PCA, the projection matrix $\mathbf{P}$ is applied to the data using $\mathbf{P}^\top(\mathbf{x}-\mathbf{\mu})$, where $\mathbf{x}$ is the feature matrix with means $\mathbf{\mu}$. Typically, the dimensions of $\mathbf{P}$ are *lower* than the dimensions of $\mathbf{x}$, resulting in fewer dimensions to the problem. Cutoffs on the dimensions of $\mathbf{P}$ are typically expressed as a proportion of the overall variance maintained after the projection. Variants of PCA include kernel PCA [@sch√∂lkopf1998], using a higher-dimensional space to improve the separability of classes, and probabilistic PCA [@tipping1999], which relies on modeling the data within a latent space with lower dimensionality.

### Whitening transforms

Another class of potentially very useful data transformations is whitening transforms, which belongs to the larger category of decorrelation methods. These methods do not perform any dimensionality reduction, but instead remove the covariance in the datasets. Whitening has proven to be particularly effective at improving the predictive ability of models applied to data with strong covariance structure [@koivunen1999]. In essence, given a matrix of features $\mathbf{x}$, with averages $\mathbf{\mu}$ and covariance $\mathbf{C}$, a whitening transform $\mathbf{W}$ is the *one of the matrices* that satisfies $\mathbf{W}^\top\mathbf{C}\mathbf{W} = \mathbf{I}$. In other words, the whitening transform results in a new set of features with unit variance and no covariance: the dimensionality of the problem remains the same but the new random variables are independent. Given any dataset with covariance matrix $\mathbf{C}$, if any $\mathbf{W}$ is a whitening transform, then so to are any matrices $\mathbf{W}\mathbf{R}$ where $\mathbf{R}$ performs a rotation with $\mathbf{R}^\top\mathbf{R} = \mathbf{I}$. The optimal whitening transform can be derived through a variety of ways [see *e.g.* @kessy2018]. The whitening transform is applied to the input vector using $\mathbf{W}^\top (\mathbf{x}-\mathbf{\mu})$: this results in new random variables that have a mean of 0, and unit variance. The new input vector after the transformation is therefore an instance of "white noise" [@vasseur2004].

## Application: optimal variables for Corsican nuthatch

```{julia}
#| echo: false
#| output: false
_ptm_path = joinpath(dirname(Base.active_project()), "checkpoints")
modelpath = joinpath(_ptm_path, "sdm-step-0.jld")
ptm = JLD.load(modelpath)
trainlabels, trainfeatures = ptm["training"]
v0 = ptm["variables"]
m0 = naivebayes(trainlabels, trainfeatures[:,v0])
```

```{julia}
#| echo: false
#| output: false
folds = kfold(trainlabels, trainfeatures; k=15, permute=true)
C0v, C0t = crossvalidate(naivebayes, trainlabels, trainfeatures[:,v0], folds)
CXv, CXt = crossvalidate(naivebayes, trainlabels, trainfeatures, folds)
```

Before we start, we can re-establish the baseline performance of the model from @sec-classification. In this (and the next) chapters, we will perform k-folds cross-validation (see @sec-crossvalidation-kfolds for a refresher), using $k=15$. This strategy gives an average MCC of `{julia} round(mean(mcc.(C0v)); digits=3)`, which represents our "target": any model with a higher MCC will be "better" according to our criteria.

In a sense, this initial model was *already* coming from a variable selection process, only we did not use a quantitative criteria to include variables. And so, it is a good idea to evaluate how our model performed, relative to a model including *all* the variables. Running the NBC again using all 19 BioClim variables from @tbl-predictors-bioclim, we get an average MCC on the validation data of `{julia} round(mean(mcc.(CXv)); digits=3)`. This is a small increase, but an increase nevertheless -- our dataset had information that was not captured by temperature and precipitation. But this model with all the variables most likely includes extraneous information that does not help, or even hinders, the predictive ability of our model. Therefore, there is probably a better version of the model somewhere, that uses the optimal set of variables, potentially with the best possible transformation applied to them.

In this section, we will start by evaluating the efficiency of different approaches to variable selection, then merge selection and transformation together to provide a model that is optimal with regards to the training data we have (the workflow is outlined in @fig-predictors-workflow). In order to evaluate the model, we will maintain the use of the MCC; in addition, we will report the PPV and NPV (like in @sec-classification), as well as the accuracy and True-Skill Statistic (TSS). The TSS is defined as the sum of true positive and true negative rates, minus one, and is an alternative measure to the MCC (although it is more sensitive to some biases). Although several authors have advocated for the use of TSS [@allouche2006], @leroy2018 have an interesting discussion of how the TSS is particularly sensitive to issues in the quality of (pseudo) absence data. For this reason, and based on the literature we covered in @sec-classification, there is no strong argument against using MCC as our selection measure.

::: column-margin
In @sec-tuning, we will revisit the question of how the MCC is "better", and spend more time evaluating alternatives. For now, we can safely *assume* that MCC is the best.
:::

To prevent the risk of interpreting the list of variables that have been retained by the model, we will *not* make a list of which they are (yet). This is because, in order to discuss the relative importance of variables, we need to introduce a few more concepts and techniques, which will not happen until @sec-explanations; at this point, we will revisit the list of variables identified during this chapter, and compare their impact on model performance to their actual importance in explaining predictions.

![Overview of the variable selection workflow; starting from a list of variables and a routine to select them, we will perform cross-validation and measure whether the model performance increases.]

  [Overview of the variable selection workflow; starting from a list of variables and a routine to select them, we will perform cross-validation and measure whether the model performance increases.]: /diagrams/variable-selection.png {#fig-predictors-workflow fig-align="center"}

### Variable selection

We will perform four different versions of stepwise variable selection. Forward, forward from a pre-selected set of two variables (temperature and precipitation), backward, and based on the Variance Inflation Factor (with a cutoff of 10). The results are presented in @tbl-predictors-selection.

```{julia}
#| echo: false
#| output: false
b0 = backwardselection(naivebayes, trainlabels, trainfeatures, folds, mcc)
Cb0v, Cb0t = crossvalidate(naivebayes, trainlabels, trainfeatures[:,b0], folds)
f0 = forwardselection(naivebayes, trainlabels, trainfeatures, folds, mcc)
Cf0v, Cf0t = crossvalidate(naivebayes, trainlabels, trainfeatures[:,f0], folds)
c0 = constrainedselection(naivebayes, trainlabels, trainfeatures, folds, [1,12], mcc)
Cc0v, Cc0t = crossvalidate(naivebayes, trainlabels, trainfeatures[:,c0], folds)
i0 = stepwisevif(trainfeatures, 10.0)
Ci0v, Ci0t = crossvalidate(naivebayes, trainlabels, trainfeatures[:,i0], folds)
```

```{julia}
#| echo: false
msrs = ["MCC" => mcc, "NPV" => npv, "PPV" => ppv, "Acc." => accuracy, "TSS" => trueskill]
hed = "| Model | Variables |"
sep = "|------|------|"
for (k,v) in msrs
    hed *= " $(k) |"
    sep *= "------|"
end
tbl = [hed, sep]
for (m, p) in ["@sec-classification baseline" => ([1,12], C0v), "All var." => (1:19, CXv), "Fwd." => (f0, Cf0v), "Fwd. (constr.)" => (c0, Cc0v), "Backw." => (b0, Cb0v), "VIF" => (i0, Ci0v)]
    v, c = p
    row = "| $(m) | $(length(v)) |"
    for (pm, pf) in msrs
        row *= " $(round(mean(pf.(c)); digits=3)) |"
    end
    push!(tbl, row)
end

push!(tbl, "\n: Consequences of different variable selection approaches on the performance of the model, as evaluated by the MCC, NPV, PPV, accuracy, and True-Skill Statistic (TSS). {#tbl-predictors-selection}")
try
    display("text/markdown", join(tbl, "\n"))
catch e
end
```

The best model is given by forward selection, although backwards selection also gives a very close performance. At this point, we may decide to keep these two strategies, and evaluate the effect of different transformations of the data.

### Variable transformation

Based on the results from @tbl-predictors-selection, we retain forward and backwards selection as our two stepwise selection methods, and now apply an additional transformation (as in @fig-predictors-workflow) to the subset of the variables. The results are presented in @tbl-predictors-transformation. Based on these results, and using the MCC as the criteria for the "best" model, we see that combining forward selection with a whitening transform gives the best predictive performance. Note that the application of a transformation *does* change the result of variable selection, as evidences by the fact that the number of retained variables changes when we apply a transformation.

```{julia}
#| echo: false
sel = ["Fwd." => forwardselection, "Backw." => backwardselection]
trf = ["PCA" => PCA, "Whitening" => Whitening, "Raw data" => nothing]
msrs = ["MCC" => mcc, "NPV" => npv, "PPV" => ppv, "Acc." => accuracy, "TSS" => trueskill]

hed = "| Selection | Transformation | Variables |"
sep = "|------|------|----|"
for (k,v) in msrs
    hed *= " $(k) |"
    sep *= "------|"
end
tbl = [hed, sep]

for (sk, sf) in sel
    for (tk, tf) in trf
        vs = sf(naivebayes, trainlabels, trainfeatures, folds, mcc; transformation=tf)
        Csv, Cst = crossvalidate(naivebayes, trainlabels, trainfeatures[:,vs], folds; transformation=tf)
        row = "| $(sk) | $(tk) | $(length(vs)) |"
        for (m, p) in msrs
            v = round(mean(p.(Csv)); digits=3)
            row *= " $(v) |"
        end
        push!(tbl, row)
    end
end

push!(tbl, "\n: Model performance when coupling variable selection with variable transformation. The measures of performance are given as in @tbl-predictors-selection, and as we use the same folds for validation, can be directly compared. {#tbl-predictors-transformation}")
try
    display("text/markdown", join(tbl, "\n"))
catch e
end

```

### Model selection

In @tbl-predictors-selection and @tbl-predictions-transformation, we have evaluated a series of several modeling strategies, defined by a variable selection and transformation technique. Using the MCC as our reference for what constitutes the best model, we can now apply the model to the relevant set of predictors, in order to see how these refinements result in a new predicted range for the species.

These results are presented in @fig-predictors-rangediff.

```{julia}
#| output: false
#| echo: false
origmodel = naivebayes(trainlabels, trainfeatures[:,[1,12]])
intermodel = naivebayes(trainlabels, trainfeatures[:,f0])
vf = forwardselection(naivebayes, trainlabels, trainfeatures, folds, mcc; transformation=Whitening)
finalmodel = naivebayes(trainlabels, trainfeatures[:,vf]; transformation=Whitening)
_layer_path = joinpath(dirname(Base.active_project()), "data", "general", "layers.tiff")
bio = [SpeciesDistributionToolkit._read_geotiff(_layer_path, SimpleSDMResponse; bandnumber=i) for i in 1:19]
opr = convert(Float64, similar(first(bio)))
ipr = convert(Float64, similar(first(bio)))
vpr = convert(Float64, similar(first(bio)))
Threads.@threads for k in keys(opr)
    ox = [bio[i][k] for i in [1,12]]
    ix = [bio[i][k] for i in f0]
    fx = [bio[i][k] for i in vf]
    opr[k] = origmodel(ox)
    ipr[k] = intermodel(ix)
    vpr[k] = finalmodel(fx)
end
```

```{julia}
#| label: fig-predictors-rangediff
#| echo: false
#| fig-cap: Consequences of different variable transformations on the predicted range of *Sitta whiteheadi*, as introduced in @fig-classification-range. Note that the small area of predicted presence in the Cap Corse (the Northern tip) has disappeared with the new set of variables and their optimal transformation.
final_range = vpr .> 0.5
inter_range = ipr .> 0.5
old_range = opr .> 0.5
rangediff(new, old) = mask(new .| old, new .- old)
fig = Figure(; resolution=(500,600))
ax1 = Axis(fig[1,1]; aspect=DataAspect(), title="Initial")
ax2 = Axis(fig[1,2]; aspect=DataAspect(), title="Final")
ax3 = Axis(fig[2,1]; aspect=DataAspect(), title="Difference")
heatmap!(ax1, old_range, colormap=vibrant[1:2])
heatmap!(ax2, final_range, colormap=vibrant[1:2])
heatmap!(ax3, final_range, colormap=[vibrant[1], vibrant[1]], alpha=0.7)
rm_pal = cgrad(sunset, 3, categorical=true)
heatmap!(ax3, rangediff(final_range, old_range); colormap = rm_pal)


cleg = [PolyElement(color = c, strokecolor = :transparent) for c in rm_pal]
clab = ["Loss", "No change", "Gain"]
Legend(fig[2,2], cleg, clab; tellheight=false, tellwidth=false, halign=:center, valign=:center, margin=(5, 5, 5, 5), nbanks=1, framevisible=false)

current_figure()
```

## Conclusion

In this chapter, we have discussed the issues with dimensionality and data leakage, and established a methodology to reduce the number of dimensions (and possible re-project the variables) while maintaining the train/predict separation. This resulted in a model whose performance (as evaluated using the MCC) increased quite significantly, which resulted in the predicted range of *Sitta whiteheadi* changing in space.

In @sec-tuning, we will finish to refine this model, by considering that the NBC is a probabilistic classifier, and tuning various hyper-parameters of the model using learning curves and thresholding. This will result in the final trained model, the behavior of which we will explore in @sec-explanations, to understand *how* the model makes predictions.

```{julia}
#| output: false
#| echo: false
_ptm_path = joinpath(dirname(Base.active_project()), "checkpoints")
modelpath = joinpath(_ptm_path, "sdm-step-1.jld")
JLD.save(
    modelpath,
    "labels", trainlabels,
    "features", trainfeatures,
    "folds", folds,
    "variables", vf,
    "transformation", Whitening
)
```