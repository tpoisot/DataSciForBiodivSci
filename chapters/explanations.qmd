# Explaining predictions {#sec-explanations}

In this chapter, we will

navigate the accuracy-explainability for public policy @bell2022

what is explainable differs between stakeholders @amarasinghe2023

biodiversity need sustained model uptake @weiskopf2022

@strumbelj2013 monte carlo approximation of shapley values

@wadoux2023 mapping of shapley values

@mesgaran2014 mapping of most important covariates

@lundberg2017 SHAP

transfo in model = we can still apply these techniques instead of asking "what does PC1 = 0.4 mean"

```{julia}
#| echo: false
#| output: false
_code_path = joinpath(dirname(Base.active_project()), "lib")
include(joinpath(_code_path, "pkg.jl"))
include(joinpath(_code_path, "confusion.jl"))
include(joinpath(_code_path, "nbc.jl"))
include(joinpath(_code_path, "palettes.jl"))
include(joinpath(_code_path, "shapley.jl"))
```

model

```{julia}
#| echo: false
#| output: false
_ptm_path = joinpath(dirname(Base.active_project()), "checkpoints")
modelpath = joinpath(_ptm_path, "sdm-step-2.jld")
ptm = JLD.load(modelpath)
y = ptm["labels"]
X = ptm["features"]
v = ptm["variables"]
tf = ptm["transformation"]
Ï„ = ptm["threshold"]
model = naivebayes(y, X; transformation=tf)
```

```{julia}
#| echo: false
#| output: false
_layer_path = joinpath(dirname(Base.active_project()), "data", "general", "layers.tiff")
bio = [SpeciesDistributionToolkit._read_geotiff(_layer_path, SimpleSDMResponse; bandnumber=i) for i in v]

pr = convert(Float64, similar(first(bio)))

Threads.@threads for k in keys(pr)
    x = [bio[i][k] for i in axes(v, 1)]
    pr[k] = model(x)
end
```

```{julia}
#| label: fig-shapley-example
#| fig-cap: Example of the contribution of the model variables to the prediction. The dashed line indicates the average prediction across all instances, and each arrow shows how the value of the feature for this instance moves the prediction, in an additive way. The length of each arrow is the Shapley value for this feature in this instance. The final prediction (in this case, how much higher/lower than the average) is given in a red cirle.
idx = 1
S = [shapley(model, X, idx, j; M=20000) for j in eachindex(v)]
P = [model(X[i,:]) for i in axes(X, 1)]
p = P[idx]

f = Figure()

ax = Axis(f[1,1], yticks = (collect(length(v):-1:1), ["BIO$(i)" for i in v]))
xlims!(ax, low=-0.5, high=0.5)

vlines!([0.0], color=:black, linestyle=:dash)

starts = cumsum(S) .- S
elev = reverse(collect(axes(S, 1)))
ydir = zeros(length(S))

arrows!(ax, starts, elev, S, ydir, align=:tailhead)
scatter!(ax, starts, elev, color=:black, markersize=8)
scatter!(ax, [p-mean(P)], [1], color=:transparent, strokecolor=:red, strokewidth=3, markersize=25)

current_figure()
```


```{julia}
S = [shapleyvalues(model, X, i, j; M=200) for i in axes(X, 1), j in axes(X, 2)]
P = [model(X[i,:]) for i in axes(X, 1)]
```

variable importance

```{julia}
varimp = vec(sum(abs.(S); dims=1))
varimp ./= sum(varimp)
vord = sortperm(varimp; rev=true)
```

plots

```{julia}
f = Figure()
gl = f[1,1] = GridLayout()
ax1 = Axis(gl[1,1]; ylabel="BIO $(v[1])", xaxisposition=:top)
density!(ax1, S[:,1])
ax2 = Axis(gl[2,1]; ylabel="BIO $(v[2])")
density!(ax2, S[:,2])
ax3 = Axis(gl[1,2]; ylabel="BIO $(v[3])", xaxisposition=:top, yaxisposition=:right)
density!(ax3, S[:,3])
ax4 = Axis(gl[2,2]; ylabel="BIO $(v[4])", yaxisposition=:right)
density!(ax4, S[:,4])

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    xlims!(ax, low=xmin, high=xmax)
    ylims!(ax, low=0.0)
    hideydecorations!(ax, label=false)
end

rowgap!(gl, 0.0)
colgap!(gl, 0.0)

current_figure()
```


```{julia}
f = Figure()
args = (color=:black, markersize=5, colorrange=(0., 1.))

ax1 = Axis(f[1,1]; xlabel="BIO $(v[1])")
scatter!(ax1, X[:,1], S[:,1]; args...)
ax2 = Axis(f[2,1]; xlabel="BIO $(v[2])")
scatter!(ax2, X[:,2], S[:,2]; args...)
ax3 = Axis(f[1,2]; xlabel="BIO $(v[3])")
scatter!(ax3, X[:,3], S[:,3]; args...)
ax4 = Axis(f[2,2]; xlabel="BIO $(v[4])")
scatter!(ax4, X[:,4], S[:,4]; args...)

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    hlines!(ax, [0.0], color=:black, linestyle=:dash)
end

current_figure()
```

map

```{julia}
V = [convert(Float32, similar(bio[1])) for i in axes(v, 1)]

Threads.@threads for k in keys(V[1])
    x = [b[k] for b in bio]
    for i in axes(v, 1)
        V[i][k] = shapleyvalues(model, X, x, i; M=200)
    end
end
```

```{julia}
mostimp = mosaic(x -> argmax(abs.(x)), V)

cmap = light

f = Figure()
ax = Axis(f[1,1])

heatmap!(ax, mostimp, colormap=cmap)

#cleg = [PolyElement(color = c, strokecolor = :transparent) for c in cmap]
#clab = ["BIO$(s)" for s in sv]
#Legend(f[1,1], cleg, clab; tellheight=false, tellwidth=false, halign=:left, valign=:top, margin=(10, 10, 10, 10))

current_figure()
```