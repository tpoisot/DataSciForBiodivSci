---
engine: julia
---

# Explaining predictions {#sec-explanations}

In this chapter, we will

```{julia}
#| echo: false
#| output: false
_code_path = joinpath(dirname(Base.active_project()), "code")
include(joinpath(_code_path, "pkg.jl"))
```

navigate the accuracy-explainability for public policy @bell2022

what is explainable differs between stakeholders @amarasinghe2023

biodiversity need sustained model uptake @weiskopf2022

### Partial responses

values of variable against mean of all others

### Inflated partial responses

sample background variables

still a measure of global model response because the values are kept but the structure is lost

gives a better sense of potentially divergent responses

### Shapley values

LOCAL (prediction-scale) importance

@strumbelj2013 monte carlo approximation of shapley values

@wadoux2023 mapping of shapley values

@mesgaran2014 mapping of most important covariates

@lundberg2017 SHAP

important properties + interpretation

### Importance of transfo as part of model

transfo in model = we can still apply these techniques instead of asking "what does PC1 = 0.4 mean"

## Application

```{julia}
#| echo: false
#| output: false
_path = joinpath(_data_path, "occurrences")
y = convert(Vector{Bool}, vec(readdlm(joinpath(_path, "training-labels.csv"))))
X = readdlm(joinpath(_path, "training-features.csv"))
coordinates = readdlm(joinpath(_path, "coordinates.csv"))
folds = JSON.parsefile(joinpath(_path, "crossvalidation.json"))["folds"]

# Load the model
modelpath = joinpath(_models_path, "sdm-threshold.json")
model = loadsdm(modelpath; threshold=true)
```

```{julia}
S = zeros(Float64, (length(variables(model)), length(labels(model))))
for (vidx, vpos) in enumerate(variables(model))
    S[vidx,:] = explain(model, vpos; threshold=false, samples=200)
end
P = features(model, variables(model))
```

TODO redraw the stemplot from the variable selection chapter to compare prediction v. explanation

```{julia}
#| echo: false
#| output: asis
#| label: tbl-explanations-importance
#| tbl-cap: blah blah blah
varimp = vec(mean(abs.(S); dims=2))
varimp ./= sum(varimp)
varord = sortperm(varimp; rev=true)

selimp = variableimportance(model, folds)

content = Vector{Any}[]
for v in varord
    vname = model.v[v]
    vctr = round(Int, varimp[v]*100)
    push!(content, [
        vname, 100varimp[v], 100selimp[v], minimum(S[v,:]), median(S[v,:]), maximum(S[v,:])
    ])
end

D = permutedims(hcat(content...))

pretty_table(
    D;
    backend = Val(:markdown),
    header = ["Variable", "Imp. (Shapley)", "Imp. (bootstrap)", "Min.", "Med.", "Max."],
    alignment = [:l, :l, :l, :l, :l, :l, :l],
    formatters = (ft_printf("BIO %1i", 1), ft_printf("%5.2f%%", [2,3]), ft_printf("%5.2f", [4,5,6])),
)
```

```{julia}
#| echo: false
#| label: fig-explanation-waterfall
#| fig-scap: Waterfall diagram for a single prediction.
#| fig-cap: Effect of each variable (sorted by importance as in @tbl-explanations-importance) on the change of the score for a single prediction. Recall that this is expressed as the change from the *average* prediction made by the model.
f = Figure(; size=(400, 200))
ax = Axis(f[1,1], ylabel="P(presence)")

# tick variables(model)[varord] - add this

pri = 1

shaps = S[:,pri][varord]
cshaps = cumsum(shaps)
prepend!(cshaps, 0)
cshaps .+= mean(predict(model; threshold=false))

for i in axes(shaps, 1)
    scatter!(ax, [i], [cshaps[i]], color=:black)
    scatter!(ax, [i], [cshaps[i+1]], color=:black)
    if i < length(shaps)
        lines!(ax, [i, i+1], [cshaps[i+1], cshaps[i+1]], color=:grey, linestyle=:dash)
    end
    arrows!(ax, [i], [cshaps[i]], [0], [shaps[i]], linewidth=5)
end

current_figure()
```

```{julia}
#| echo: false
#| label: fig-explanation-effects
#| fig-scap: Distribution of the effects on the average prediction for the three most important variables.
#| fig-cap: Effect of each variable (sorted by importance as in @tbl-explanations-importance) on the change of the score for a single prediction. Recall that this is expressed as the change from the *average* prediction made by the model.
f = Figure(; size=(700, 600))
gl = f[1,1] = GridLayout()

xmin, xmax = extrema(S)

ax1 = Axis(gl[1,1]; ylabel="BIO $(model.v[varord[1]])", xaxisposition=:top)
hist!(ax1, S[varord[1],:], color=:grey, bins=LinRange(xmin, xmax, 50))
ax2 = Axis(gl[2,1]; ylabel="BIO $(model.v[varord[2]])", xaxisposition=:top, yaxisposition=:right)
hist!(ax2, S[varord[2],:], color=:grey, bins=LinRange(xmin, xmax, 50))
ax3 = Axis(gl[3,1]; ylabel="BIO $(model.v[varord[3]])", xaxisposition=:bottom, yaxisposition=:left)
hist!(ax3, S[varord[3],:], color=:grey, bins=LinRange(xmin, xmax, 50))

hidexdecorations!(ax2, label=false, grid=false)

for ax in [ax1, ax2, ax3]
    xlims!(ax, low=xmin, high=xmax)
    ylims!(ax, low=0.0)
    vlines!(ax, [0.0], color=:black, linestyle=:dash)
    hideydecorations!(ax, label=false)
end

rowgap!(gl, 0.0)
colgap!(gl, 0.0)

current_figure()
```

```{julia}
f = Figure(; size=(600, 400))
args = (color=predict(model), markersize=5, colorrange=(0., 1.))

ax1 = Axis(f[1,1]; xlabel="BIO $(model.v[varord[1]])")
scatter!(ax1, P[varord[1],:], S[varord[1],:]; args...)
ax2 = Axis(f[1,2]; xlabel="BIO $(model.v[varord[2]])")
scatter!(ax2, P[varord[2],:], S[varord[2],:]; args...)
ax3 = Axis(f[2,1]; xlabel="BIO $(model.v[varord[3]])")
scatter!(ax3, P[varord[3],:], S[varord[3],:]; args...)
ax4 = Axis(f[2,2]; xlabel="BIO $(model.v[varord[4]])")
scatter!(ax4, P[varord[4],:], S[varord[4],:]; args...)

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    hlines!(ax, [0.0], color=:black, linestyle=:dash)
end

current_figure()
```

```{julia}
_layer_path = joinpath(dirname(Base.active_project()), "data", "occurrences", "layers.tiff")
bio = [SimpleSDMLayers._read_geotiff(_layer_path; bandnumber=i) for i in 1:19]
```

```{julia}
V = explain(model, bio; threshold=false, samples=30)
```

```{julia}
heatmap(V[varord[1]], colormap=bkcol.div, colorrange=(-0.5,0.5))
```

```{julia}
#| echo: false
#| label: fig-explanations-mosaic
#| fig-scap: Mosaic of the most important variable for each pixel
#| fig-cap: TODO
mostimp = mosaic(x -> argmax(abs.(x)), V)
layernames = "BIO" .* string.(model.v[varord])

f = Figure(; size = (800, 400))
ax = Axis(f[1, 1]; aspect = DataAspect())
var_colors = cgrad(bkcol.cat, length(variables(model)), categorical=true)
hm = heatmap!(ax, mostimp; colormap = var_colors, colorrange=(1, length(variables(model))))
contour!(ax, predict(model, bio; threshold=true); color = :black, linewidth = 0.5)
hidedecorations!(ax)
hidespines!(ax)
Legend(
    f[2, 1],
    [PolyElement(; color = var_colors[i]) for i in 1:length(variables(model))],
    layernames;
    orientation = :horizontal,
    nbanks = 1,
)
current_figure()
```


```{julia}
#| output: false
#| echo: false
modelpath = joinpath(_models_path, "sdm-importance.json")
model.v = model.v[varord]
writesdm(modelpath, model)
```