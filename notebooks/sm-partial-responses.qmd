# Supp. Mat. - effects of variables

In this chapter, we will --- variable importance

```{julia}
_code_path = joinpath(@__DIR__, "..", "lib")
include(joinpath(_code_path, "pkg.jl"))
include(joinpath(_code_path, "confusiontable.jl"))
include(joinpath(_code_path, "nbc.jl"))
include(joinpath(_code_path, "shapley.jl"))
```

load the model

```{julia}
_ptm_path = joinpath(@__DIR__, "..", "ptm")
modelpath = joinpath(_ptm_path, "reindeer-tuned.jld")
ptm = JLD.load(modelpath)
```

re-train

```{julia}
τ = ptm["threshold"]
predictor = naivebayes(ptm["training"]...; presence=ptm["prior"])
y, X = ptm["testing"]
sv = ptm["varidx"]
# ConfusionMatrix(vec(mapslices(predictor, X; dims=2)), y, τ)
```

shapley values monte carlo

```{julia}
S = [shapleyvalues(predictor, X, i, j) for i in axes(X, 1), j in axes(X, 2)]
P = [predictor(X[i,:]) for i in axes(X, 1)]
```

```{julia}
heatmap(S)
```

look at spread for each value

```{julia}
f = Figure()
ax1 = Axis(f[1,1]; ylabel="BIO $(sv[1])")
density!(ax1, S[:,1])
ax2 = Axis(f[2,1]; ylabel="BIO $(sv[2])")
density!(ax2, S[:,2])
ax3 = Axis(f[1,2]; ylabel="BIO $(sv[3])")
density!(ax3, S[:,3])
ax4 = Axis(f[2,2]; ylabel="BIO $(sv[4])")
density!(ax4, S[:,4])

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    xlims!(ax, low=xmin, high=xmax)
    ylims!(ax, low=0.0)
    hideydecorations!(ax, label=false)
end
hidexdecorations!(ax1, grid=false)
hidexdecorations!(ax2, grid=false)

rowgap!(gl, 0.0)

current_figure()
```

make some plots of the shapley values per points

```{julia}
scatter(X[:,1], S[:,1], color=(:black, 0.2))
scatter(X[:,2], S[:,2], color=(:black, 0.2))
scatter(X[:,3], S[:,3], color=(:black, 0.2))
scatter(X[:,4], S[:,4], color=(:black, 0.2))
```

```{julia}
using SpeciesDistributionToolkit
_layer_path = joinpath(@__DIR__, "..", "data", "general", "rangifer-layers.tiff")
bio = [SpeciesDistributionToolkit._read_geotiff(_layer_path, SimpleSDMResponse; bandnumber=i) for i in ptm["varidx"]]
```

map shapley values -- this is done on the coarsened data to save time

```{julia}
V = [convert(Float32, similar(bio[1])) for i in axes(sv, 1)]

Threads.@threads for k in keys(V[1])
    x = [b[k] for b in bio]
    for i in axes(sv, 1)
        V[i][k] = shapleyvalues(predictor, X, x, i; M=200)
    end
end
```

plot the partial effects of each variable

```{julia}
heatmap(V[2], colormap=:roma, colorrange=(-0.2,0.2))
```

most important variables

```{julia}
mostimp = mosaic(x -> argmax(abs.(x)), V)

cmap = Makie.wong_colors()[2:5]

f = Figure()
ax = Axis(f[1,1])

heatmap!(ax, mostimp, colormap=cmap)

cleg = [PolyElement(color = c, strokecolor = :transparent) for c in cmap]
clab = ["BIO$(s)" for s in sv]
Legend(f[1,1], cleg, clab; tellheight=false, tellwidth=false, halign=:left, valign=:top, margin=(10, 10, 10, 10))

current_figure()
```