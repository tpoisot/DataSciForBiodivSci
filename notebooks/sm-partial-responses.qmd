# Supp. Mat. - effects of variables

In this chapter, we will --- variable importance

```{julia}
_code_path = joinpath(@__DIR__, "..", "lib")
include(joinpath(_code_path, "pkg.jl"))
include(joinpath(_code_path, "confusiontable.jl"))
include(joinpath(_code_path, "nbc.jl"))
include(joinpath(_code_path, "shapley.jl"))
```

load the model

```{julia}
_ptm_path = joinpath(@__DIR__, "..", "ptm")
modelpath = joinpath(_ptm_path, "reindeer-tuned.jld")
ptm = JLD.load(modelpath)
```

re-train

```{julia}
τ = ptm["threshold"]
predictor = naivebayes(ptm["training"]...; presence=ptm["prior"])
y, X = ptm["testing"]
sv = ptm["varidx"]
# ConfusionMatrix(vec(mapslices(predictor, X; dims=2)), y, τ)
```

shapley values monte carlo

```{julia}
S = [shapleyvalues(predictor, X, i, j) for i in axes(X, 1), j in axes(X, 2)]
P = [predictor(X[i,:]) for i in axes(X, 1)]
```

Example for a single prediction

```{julia}
#| label: fig-shapley-example
#| fig-cap: Example of the contribution of the model variables to the prediction. The dashed line indicates the average prediction across all instances, and each arrow shows how the value of the feature for this instance moves the prediction, in an additive way. The length of each arrow is the Shapley value for this feature in this instance. The final prediction (in this case, how much higher/lower than the average) is given in a red cirle.
shaps = S[1,:]

f = Figure()

ax = Axis(f[1,1], yticks = ([4,3,2,1], ["BIO$(v)" for v in sv]))
xlims!(ax, low=-0.5, high=0.5)

vlines!([0.0], color=:black, linestyle=:dash)

starts = cumsum(shaps) .- shaps
elev = reverse(collect(axes(shaps, 1)))
ydir = zeros(length(shaps))

arrows!(ax, starts, elev, shaps, ydir, align=:tailhead)
scatter!(ax, [P[1]-mean(P)], [1], color=:transparent, strokecolor=:red, strokewidth=3, markersize=25)

current_figure()
```

look at spread for each value

```{julia}
f = Figure()
gl = f[1,1] = GridLayout()
ax1 = Axis(gl[1,1]; ylabel="BIO $(sv[1])", xaxisposition=:top)
density!(ax1, S[:,1])
ax2 = Axis(gl[2,1]; ylabel="BIO $(sv[2])")
density!(ax2, S[:,2])
ax3 = Axis(gl[1,2]; ylabel="BIO $(sv[3])", xaxisposition=:top, yaxisposition=:right)
density!(ax3, S[:,3])
ax4 = Axis(gl[2,2]; ylabel="BIO $(sv[4])", yaxisposition=:right)
density!(ax4, S[:,4])

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    xlims!(ax, low=xmin, high=xmax)
    ylims!(ax, low=0.0)
    hideydecorations!(ax, label=false)
end

rowgap!(gl, 0.0)
colgap!(gl, 0.0)

current_figure()
```

make some plots of the shapley values per points

```{julia}
f = Figure()
args = (color=:black, markersize=5, colorrange=(0., 1.))

ax1 = Axis(f[1,1]; xlabel="BIO $(sv[1])")
scatter!(ax1, X[:,1], S[:,1]; args...)
ax2 = Axis(f[2,1]; xlabel="BIO $(sv[2])")
scatter!(ax2, X[:,2], S[:,2]; args...)
ax3 = Axis(f[1,2]; xlabel="BIO $(sv[3])")
scatter!(ax3, X[:,3], S[:,3]; args...)
ax4 = Axis(f[2,2]; xlabel="BIO $(sv[4])")
scatter!(ax4, X[:,4], S[:,4]; args...)

xmin, xmax = extrema(S)
for ax in [ax1, ax2, ax3, ax4]
    hlines!(ax, [0.0], color=:black, linestyle=:dash)
end

current_figure()
```

```{julia}
using SpeciesDistributionToolkit
_layer_path = joinpath(@__DIR__, "..", "data", "general", "rangifer-layers.tiff")
bio = [SpeciesDistributionToolkit._read_geotiff(_layer_path, SimpleSDMResponse; bandnumber=i) for i in ptm["varidx"]]
```

map shapley values -- this is done on the coarsened data to save time

```{julia}
V = [convert(Float32, similar(bio[1])) for i in axes(sv, 1)]

Threads.@threads for k in keys(V[1])
    x = [b[k] for b in bio]
    for i in axes(sv, 1)
        V[i][k] = shapleyvalues(predictor, X, x, i; M=200)
    end
end
```

plot the partial effects of each variable

```{julia}
heatmap(V[3], colormap=:roma, colorrange=(-0.2,0.2))
```

most important variables

```{julia}
mostimp = mosaic(x -> argmax(abs.(x)), V)

cmap = Makie.wong_colors()[2:5]

f = Figure()
ax = Axis(f[1,1])

heatmap!(ax, mostimp, colormap=cmap)

cleg = [PolyElement(color = c, strokecolor = :transparent) for c in cmap]
clab = ["BIO$(s)" for s in sv]
Legend(f[1,1], cleg, clab; tellheight=false, tellwidth=false, halign=:left, valign=:top, margin=(10, 10, 10, 10))

current_figure()
```