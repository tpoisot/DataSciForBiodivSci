[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning for Biodiversity Scientists",
    "section": "",
    "text": "Preface\nMachine learning is now an established methodology to study biodiversity, and this is a problem.\nThis may be an opportunity when it comes to advancing our knowledge of biodiversity, and in particular when it comes to translating this knowledge into action (Tuia et al. 2022); but make no mistake, this is a problem for us, biodiversity scientists, as we suddenly need to develop competences in an entirely new field in order to remain professionally relevant (Ellwood et al. 2019). And as luck would have it, there are easier fields to master than machine learning. The point of this book, therefore, is to provide an introduction to fundamental concepts in data science, from the perspective of a biodiversity scientist, by using examples corresponding to real-world use-cases of these techniques.\n\n\nThink of data science as being its own epistemology (Desai et al. 2022), and machine learning as one methodology we can apply to work within this context.\nBut what do we mean by machine learning and data science? Most science, after all, relies on data in some capacity. What falls under the umbrella of data science is, in short, embracing in equal measure quantitative skills (mathematics, machine learning, statistics), programming, and domain expertise, in order to solve well-defined problems. Machine learning is a series of techniques (or, more precisely, a high-level approach to these techniques) through which we conduct our data science activities. A core tenet of data science is that, when using it, we seek to “deliver actionable insights”, which is MBA-speak for “figuring out what to do next”. One of the ways in which this occurs is by letting the data speak, after they have been, of course, properly cleaned and transformed and engineered. This entire process is driven by (or, even, subject to) domain knowledge. There is no such thing as data science, at least not in a vacuum: there is data science as a methodology applied to a specific domain.\nBefore we embark into a journey of discovery on the applications of data science to biodiversity, allow me to let you in on a little secret: data science is a little bit of a misnomer. In order to understand why, I need (or at least, I really want) to talk about cooking.\nTo become a good cook, there are general techniques one must master, which we apply to specific steps in recipes; these recipes draw from a common cultural or local repertoire and cultural specifics (but the evolution of recipes is remarkably convergent – most cuisines have a mirepoix, bread, and beer). Finally, there is the product, i.e. the unique dish that you have cooked. And so it is for data science too: we can abstract a series of processes and guidelines, think about their application within the context of our specific field, study system, or line and research, and all of this will shape the final data product we can serve.\nWhen writing this preface, I turned to my shelf of cookbooks, and picked my two favorites: Robuchon’s The Complete Robuchon (a no-nonsense list of hundreds of recipes with no place for improvisation), and Bianco’s Pizza, Pasta, and Other Food I Like (a short volume with very few pizza and pasta, and wonderful discussions about the importance of humility, creativity, and generosity). Data science, if it were cooking, would feel a lot like the second. Deviation from the rules is often justifiable if you feel like it. But this improvisation requires good skills, a clear mental map of the problem, a defined vision of what these deviations will let you achieve, and a library of patterns that you can draw from.\nThis book will not get you here. But it will speed up the process, by framing the practice of data science as a natural way to conduct research on biodiversity.\n\n\n\n\n\n\n\nReferences\n\n\nDesai, J., Watson, D., Wang, V., Taddeo, M. & Floridi, L. (2022). The epistemological foundations of data science: a critical review. Synthese, 200.\n\n\nEllwood, E.R., Sessa, J.A., Abraham, J.K., Budden, A.E., Douglas, N., Guralnick, R., et al. (2019). Biodiversity Science and the Twenty-First Century Workforce. BioScience, 70, 119–121.\n\n\nTuia, D., Kellenberger, B., Beery, S., Costelloe, B.R., Zuffi, S., Risse, B., et al. (2022). Perspectives in machine learning for wildlife conservation. Nature Communications, 13, 792.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Core concepts in data science\nThis book started as a collection of notes from several classes I taught in the Department of Biological Sciences at the Université de Montréal, as well as a few workshops I ran for the Québec Centre for Biodiversity Sciences. When teaching data synthesis, data science, and machine learning to biology students, I realized that the field was missing resources that could serve as stepping stones to proficiency.\nThere are excellent manuals covering the mathematics of data science and machine learning (I will list a few later on). These are important to read, because the field of machine learning is an offshoot of mathematics and computer science, and it is important to become familiar with the core concepts. A little bit of calculus and a whole lot of linear algebra should be more of the same for many ecologists. But these resources are usually less useful as practical guides to the field.\nThere are many good papers giving overviews of some applications of data science to biological problems (a lot of them are cited in this book). These are important to read, because any attempt to adopt a new methodology (new to us, not new to the field, or new in absolute terms!) must proceed alongside some familiarity of how it has been used by our colleagues. But these articles, although good at showing how these tools are actually used, usually make it difficult to establish more general recommendations.\nThere are, finally, thousands of tutorials about how to write code to perform any machine learning algorithm you can think of. Some of them are even good. But these tutorials usually suffer (in our case) from being disconnected from the field of biodiversity science, and of course are limited by the language they use, the version of the packages they ran with, and again do not allow for much generalization.\nWhen navigating these resources, one thing that students commonly called for was an attempt to tie concepts together, and to explain when and how human decisions were required in ML approaches (Sulmont et al. 2019). This is particularly true of students with strong domain knowledge that want to understand how machine learning fits with their ability to do research.\nThis is book is this attempt.\nThere are, broadly speaking, two situations in which reading this book is useful. The first is when you are done reading some general books about machine learning, and want to see how it can be applied to problems that are more specific to biodiversity research; the second is when you have a working understanding of biodiversity research, and want a stepping stone into the machine learning literature. Note that there is no scenario where you stop after reading this book – this is by design. The purpose of this book is to give a practical overview of “how data science for biodiversity happens”, and this needs to be done in parallel to even more fundamental readings.\nA wonderful introduction to the mathematics behind machine learning can be found in Deisenroth et al. (2020), which provides stunning visualization of mathematical concepts. Yau (2015) is a particularly useful book about the ways to visualize data in a meaningful way. Watt et al. (2020) is a solid introduction to the underlying theory of applied machine learning. For ecologists, Dietze (2017) is a comprehensive, and still highly readable, treaty on the problems associated to forecasting. The best way to decide on which book to read is often to look at the books that your colleagues have also read; being able to work through material collectively is useful, and knowing that you can practice the craft of data science within a community will make your learning more effective.\nWhen reading this book, I encourage you to read the chapters in order. They have been designed to be read in order, because each chapter introduces the least possible amount of new concepts, but often requires to build on the previous chapters. This is particularly true of the second half of this book.\nG\n\n\n\ntraining\n\n\nTraining data\n\n\n\nmodel\n\n\nModel training\n\n\n\ntraining-&gt;model\n\n\n\n\n\ncrossval\n\n\nCross-validation\n\n\n\ntraining-&gt;crossval\n\n\n\n\n\ntesting\n\n\nTesting data\n\n\n\ntest\n\n\nPerformance test\n\n\n\ntesting-&gt;test\n\n\n\n\n\nprediction\n\n\nPrediction\n\n\n\nmodel-&gt;prediction\n\n\n\n\n\nprediction-&gt;crossval\n\n\n\n\n\ncvplus\n✓\n\n\n\ncrossval-&gt;cvplus\n\n\n\n\n\ncvminus\n✗\n\n\n\ncrossval-&gt;cvminus\n\n\n\n\n\ncvplus-&gt;test\n\n\n\n\n\ntestplus\n✓\n\n\n\ntest-&gt;testplus\n\n\n\n\n\ntestminus\n✗\n\n\n\ntest-&gt;testminus\n\n\n\n\n\nuse\n\nUsable model\n\n\n\ntestplus-&gt;use\n\n\n\n\n\n\n\n\nFlowchart 1.1: An overview of the process of coming up with a usable model. The process of creating a model starts with a trainig dataset made of predictors and responses, which is used to train a model. This model is cross-validated on its training data, to estimate whether it can be fully retrained. The fully trained model is that applied to an independent testing dataset, and the evaluation of the performance determines whether it will be used.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#core-concepts-in-data-science",
    "href": "intro.html#core-concepts-in-data-science",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1.1 EDA\n\n\n1.1.2 Clustering and regression\n\n\n1.1.3 Supervised and unsupervised\n\n\n1.1.4 Training, testing, and validation\n\n\n1.1.5 Transformations and feature engineering",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#an-overview-of-the-content",
    "href": "intro.html#an-overview-of-the-content",
    "title": "1  Introduction",
    "section": "1.2 An overview of the content",
    "text": "1.2 An overview of the content\nIn ?sec-clustering, we introduce some fundamental questions in data science, by working on the clustering of pixels in Landsat data. The point of this chapter is to question the way we think about data, and to start a discussion about an “optimal” model, hyper-parameters, and what a “good” model is.\nIn ?sec-gradientdescent, we revisit well-trodden statistical ground, by fitting a linear model to linear data, but uisng gradient descent. This provides us with an opportunity to think about what a “fitted” model is, whether it is possible to learn too much from data, and why being able to think about predictions in the unit of our problem helps.\nIn ?sec-crossvalidation, we start introducing one of the most important bit element of data science practice, in the form of cross-validation. We apply this technique to the prediction of plant phenology over a millenia, and think about the central question of “what kind of decision-making can we justify with a model”.\nIn Chapter 2, we introduce the task of classification, and spend a lot of time thinking about biases in predictions, which are acceptable, and which are not. We start building a model for the distribution of the Reindeer, which we will improve over a few chapters.\nIn ?sec-predictors, we explore ways to perform variable selection, think of this task as being part of the training process, and introduce ideas related to dimensionality reduction. In ?sec-leakage, we discuss data leakage, where it comes from, and how to prevent it. This leads us to introducing the concept of data transformations as a model, which will establish some best practices we will keep on using throughout this book.\nIn ?sec-tuning, we conclude story arcs that had been initiated in a few previous chapters, and explore training curves, the tuning of hyper-parameters, and moving-threshold classification. We provide the final refinements to out model of the Reindeer distribution.\nIn ?sec-explanations, we will shift our attention from prediction to understanding, and explore techniques to quantify the importance of variables, as well as ways to visualize their contribution to the predictions. In doing so, we will introduce concepts of model interpretation and explainability.\nIn ?sec-bagging, …",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-introduction-colors",
    "href": "intro.html#sec-introduction-colors",
    "title": "1  Introduction",
    "section": "1.3 A note on colors",
    "text": "1.3 A note on colors\n\n\n\nType\nMeaning\nColor\n\n\n\n\nAll\ngeneric\n\n\n\n\nno data\n\n\n\nCross-validation\ntraining\n\n\n\n\nvalidation\n\n\n\n\ntesting\n\n\n\nSpecies range\npresence\n\n\n\n\nabsence\n\n\n\nRange change\nloss\n\n\n\n\nno change\n\n\n\n\ngain\n\n\n\n\nIn addition, there are three important color palettes. Information that is sequential is nature, which is to say it increases on a continuous scale without a logical midpoint, is rendered with these colors (from low to the left, to high values to the right):\n\n\n\n\n\nThe diverging palette is used for values that have a clear midpoint (usually values centered on 0). The midpoint will always correspond to the central color, and this palette is symmetrical:\n\n\n\n\n\nFinally, the categorical data are represented using the following palette:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#some-rules-about-this-book",
    "href": "intro.html#some-rules-about-this-book",
    "title": "1  Introduction",
    "section": "1.4 Some rules about this book",
    "text": "1.4 Some rules about this book\nWhen I started aggregating these notes, I decided on a series of four rules. No code, no simulated data, no long list of model, and above all, no iris dataset. In this section, I will go through why I decided to adopt these rules, and how it should change the way you interact with the book.\n\n1.4.1 No code\nThis is, maybe, the most surprising rule, because data science is programming (in a sense). But sometimes there is so much focus on programming that we lose track of the other, important aspects of the practice of data science: abstractions, relationship with data, and domain knowledge.\nThis book did involve a lot of code. Specifically, this book was written using Julia (Bezanson et al. 2017), and every figure is generated by a notebook, and they are part of the material I use when teaching from this content in the classroom. But code is not a universal language, and unless you are really familiar with the language, code can obfuscate. I had no intention to write a Julia book (or an R book, or a Python book). The point is to think about data science applied to ecological research, and I felt like it would be more inclusive to do this in a language agnostic way.\nAnd finally, code rots. Code with more dependencies rots faster. It take a single change in the API of a package to break the examples, and then you are left with a very expensive monitor stand. With a few exceptions, the examples in this book do not use complicated packages either.\n\n\n1.4.2 No simulated data\nI have nothing against simulated data. I have, in fact, generated simulated data in many different contexts, for training or for research. But the limit of simulated is that we almost inevitably fail to include what makes real data challenging: noise, incomplete or uneven sampling, data representation artifacts. And so when it is time to work on real data, everything seems suddenly more difficult.\nSimulated data have immense training value; but it is also important to engage with the imperfect actual data, as we will overwhelmingly apply the concepts from this book to them. For this reason, there are no simulated data in this book. Everything that is presented correspond to an actual use case that proceeds from a question we could reasonably ask in the context, paired with a dataset that could be used to answer this question.\n\n\n1.4.3 No model zoo\nMy favorite machine learning package is MLJ (Blaom et al. 2020). When given a table of labels and a table of features, it will give back a series of models that match with these data. It speeds up the discovery of models considerably, and is generally a lot more informative than trying to read from a list of possible techniques. If I have questions about an algorithm from this list, I can start reading more documentation about how it works.\nReading a long enumeration of things is boring; unless it’s sung by Yakko Warner, I’m not interested, and I refuse to inflict it on people. But more importantly, these enumerations of models often distract from thinking about the problem we want to solve in more abstract terms. I rarely wake up in the morning and think “oh boy I can’t wait to train a SVM today”; chances are, my thought process will be closer to “I need to tell the mushroom people where I think the next good foraging locations will be”. The rest, is implementation details.\nIn fact, 90% of this book uses only two models: linear regression, and the Naïve Bayes Classifier. Some other models are involved in a few chapters, but these two models are breathtakingly simple, work surprisingly well, run fast, and can be tweaked to allow us to build deep intuitions about how machines learn. They are perfect for the classroom, and give us the freedom to spent most of our time thinking about how we interact with models, and why, and how we make methodological decisions.\n\n\n1.4.4 No iris dataset\nFrom a teaching point of view, the iris dataset is like hearing Smash Mouth in a movie trailer, in that it tells you two things with absolute certainty. First, that you are indeed watching a movie trailer. Second, that you could be watching Shrek instead. There are datasets out there that are infinitely more exciting to use than iris.\nBut there is a far more important reason not to use iris: eugenics.\nListen, we made it several hundred words in a text about quantitative techniques in life sciences without encountering a sad little man with racist ideas that academia decided to ignore because “he just contributed so much to the field, and these were different times, maybe we shouldn’t be so quick to judge?”. Ronald Aylmer Fisher, statistics’ most racist nerd, was such a man; and there are, of course, those who want to consider the possibility that you can be outrageously racist as long as you are an outstanding scientist (Bodmer et al. 2021).\nThe iris dataset was first published by Fisher (1936) in the Annals of Eugenics (so, there’s a bit of a red flag there already), and draws from several publications by Edgar Anderson, starting with Anderson (1928); Unwin & Kleinman (2021) have an interesting historiographic deep-dive into the correspondence between the two. Judging by the dates, you may think that Fisher was a product of his time. But this could not be further from the truth. Fisher was dissatisfied with his time, to the point where his contributions to statistics were done in service of his views, in order to provide the appearance of scientific rigor to his bigotry.\nFisher advocated for forced sterilization for the “defectives” (which he estimated at, oh, roughly 10% of the population), argued that not all races had equal capacity for intellectual and emotional development, and held a host of related opinions. There is no amount of contribution to science that pardon these views. Coming up with the idea of the null hypothesis does not even out lending “scientific” credibility to ideas whose logical (and historical) conclusion is genocide. That Ronald Fisher is still described as a polymath and a genius is infuriating, and we should use every alternative to his work that we have.\nThankfully, there are alternatives!\nThe most broadly known alternative to the iris dataset is penguins, which was collected by ecologists (Gorman et al. 2014), and published as a standard dataset (Horst et al. 2020) so that we can train students without engaging with the “legacy” of eugenicists. The penguins dataset is also genuinely good! The classes are not so obviously separable, there are some missing data that reflect the reality of field work, and the data about sex and spatial location have been preserved, which increases the diversity of questions we can ask. We won’t use penguins either. It’s a fine dataset, but at this point there is little that we can write around it that would be new, or exciting. But if you want to apply some of the techniques in this book? Go penguins.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/classification.html",
    "href": "chapters/classification.html",
    "title": "2  Supervised classification",
    "section": "",
    "text": "2.1 The problem: distribution of an endemic species\nIn the previous chapters, we have focused our efforts on regression models, which is to say models that predict a continuous response. In this chapter, we will introduce the notion of classification, which is the prediction of a discrete variable representing a category. There are a lot of topics we need to cover before we can confidently come up with a model for classification, and so this chapter is part of a series. We will first introduce the idea of classification; in ?sec-predictors, we will explore techniques to fine-tune the set of variables we use for prediction; in ?sec-tuning, we will think about predictions of classes as probabilities, and generalize these ideas and think about learning curves; finally, in ?sec-explanations, we will think about variables a lot more, and introduce elements of model interpretability.\nThroughout these chapters, we will be working on a single problem, which is to predict the distribution of the Corsican nuthatch, Sitta whiteheadi. The Corsican nuthatch is endemic to Corsica, and its range has been steadily shrinking over time due to loss of habitat through human activity, including fire, leading to it being classified as “vulnerable to extinction” by the International Union for the Conservation of Nature. Barbet-Massin & Jiguet (2011) nevertheless show that the future of this species is not necessarily all gloom and doom, as climate change is not expected to massively affect its distribution.\nSpecies Distribution Modeling (SDM; Elith & Leathwick (2009)), also known as Ecological Niche Modeling (ENM), is an excellent instance of ecologists doing applied machine learning already, as Beery et al. (2021) rightfully pointed out. In fact, the question of fitness-for-purpose, which we discussed in previous chapters (for example in ?sec-crossvalidation-fitness), has been covered in the SDM literature (Guillera-Arroita et al. 2015). In these chapters, we will fully embrace this idea, and look at the problem of predicting where species can be as a data science problem. In the next chapters, we will converge again on this problem as an ecological one. Being serious about our data science practices when training a species distribution model is important: Chollet Ramampiandra et al. (2023) make the important point that it is easy to overfit more complex models, at which point they cease outperforming simple statistical models.\nBecause this chapter is the first of a series, we will start by building a bare-bones model on ecological first principles. This is an important step. The rough outline of a model is often indicative of how difficult the process of training a really good model will be. But building a good model is an iterative process, and so we will start with a very simple model and training strategy, and refine it over time. In this chapter, the purpose is less to have a very good training process; it is to familiarize ourselves with the task of classification.\nWe will therefore start with a blanket assumption: the distribution of species is something we can predict based on temperature and precipitation. We know this to be important for plants and animals (Clapham et al. 1935; Whittaker 1962), to the point where the relationship between mean temperature and annual precipitation is how we find delimitations between biomes. If you need to train a lot of models on a lot of species, temperature and precipitation are not the worst place to start (Berteaux 2014).\nConsider our dataset for a minute. In order to predict the presence of a species, we need information about where the species has been observed; this we can get from the Global Biodiversity Information Facility. We need information about where the species has not been observed; this is usually not directly available, but there are ways to generate background points that are a good approximation of this (Barbet-Massin et al. 2012; Hanberry et al. 2012). All of these data points come in the form \\((\\text{lat.}, \\text{lon.}, y)\\), which give a position in space, as well as \\(y = \\{+,-\\}\\) (the species is present or absent!) at this position.\nTo build a model with temperature and precipitation as inputs, we need to extract the temperature and precipitation at all of these coordinates. We will use the CHELSA1 dataset (Karger et al. 2017), at a resolution of 30 seconds of arc. WorldClim2 (Fick & Hijmans 2017) also offers access to similar bioclimatic variables, but is known to have some artifacts that may bias the analysis.\nThe predictive task we want to complete is to get a predicted presence or absence \\(\\hat y = \\{+,-\\}\\), from a vector \\(\\mathbf{x}^\\top = [\\text{temp.} \\quad \\text{precip.}]\\). This specific task is called classification, and we will now introduce some elements of theory.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervised classification</span>"
    ]
  },
  {
    "objectID": "chapters/classification.html#what-is-classification",
    "href": "chapters/classification.html#what-is-classification",
    "title": "2  Supervised classification",
    "section": "2.2 What is classification?",
    "text": "2.2 What is classification?\nClassification is the prediction of a qualitative response. In ?sec-clustering, for example, we predicted the class of a pixel, which is a qualitative variable with levels \\(\\{1, 2, \\dots, k\\}\\). This represented an instance of unsupervised learning, as we had no a priori notion of the correct class of the pixel. When building SDMs, by contrast, we often know where species are, and we can simulate “background points”, that represent assumptions about where the species are not. For this series of chapters, the background points have been generated by sampling preferentially the pixels that are farther away from known presences of the species.\n\n\nWhen working on \\(\\{+,-\\}\\) outcomes, we are specifically performing binary classification. Classification can be applied to more than two levels.\nIn short, our response variable has levels \\(\\{+, -\\}\\): the species is there, or it is not – we will challenge this assumption later in the series of chapters, but for now, this will do. The case where the species is present is called the positive class, and the case where it is absent is the negative class. We tend to have really strong assumptions about classification already. For example, monitoring techniques using environmental DNA (e.g. Perl et al. 2022) are a classification problem: the species can be present or not, \\(y = \\{+,-\\}\\), and the test can be positive of negative \\(\\hat y = \\{+,-\\}\\). We would be happy in this situation whenever \\(\\hat y = y\\), as it means that the test we use has diagnostic value. This is the essence of classification, and everything that follows is more precise ways to capture how close a test comes from this ideal scenario.\n\n2.2.1 Separability\nA very important feature of the relationship between the features and the classes is that, broadly speaking, classification is much easier when the classes are separable. Separability (often linear separability) is achieved when, if looking at some projection of the data on two dimensions, you can draw a line that separates the classes (a point in a single dimension, a plane in three dimension, and so on and so forth). For reasons that will become clear in ?sec-predictors-curse, simply adding more predictors is not the right thing to do.\nIn Figure 2.1, we can see the temperature (in degrees) for locations with recorded presences of Corsican nuthatches, and for locations with assumed absences. These two classes are not quite linearly separable alongside this single dimension (maybe there is a different projection of the data that would change this; we will explore one in ?sec-predictors), but there are still some values at which our guess for a class changes. For example, at a location with a temperature colder than 10°C, presences are far more likely. For a location with a temperature warmer than 15°C, absences become overwhelmingly more likely. The locations with a temperature between 10°C and 15°C can go either way.\n\n\n\n\n\n\n\nFigure 2.1: This figures show the separability of the presences and pseudo-absences on the temperature and precipitation dimensions.\n\n\n\n\n\n\n2.2.2 The confusion table\nEvaluating the performance of a classifier (a classifier is a model that performs classification) is usually done by looking at its confusion table, which is a contingency table of the form\n\\[\n\\begin{pmatrix}\n\\text{TP} & \\text{FP}\\\\\n\\text{FN} & \\text{TN}\n\\end{pmatrix} \\,.\n\\tag{2.1}\\]\nThis can be stated as “counting the number of times each pair of (prediction, observation occurs)”, like so:\n\\[\n\\begin{pmatrix}\n|\\hat +, +| & |\\hat +, -|\\\\\n|\\hat -, +| & |\\hat -, -|\n\\end{pmatrix} \\,.\n\\tag{2.2}\\]\nThe four components of the confusion table are the true positives (TP; correct prediction of \\(+\\)), the true negatives (TN; correct prediction of \\(-\\)), the false positives (FP; incorrect prediction of \\(+\\)), and the false negatives (FN; incorrect prediction of \\(-\\)). Quite intuitively, we would like our classifier to return mostly elements in TP and TN: a good classifier has most elements on the diagonal, and off-diagonal elements as close to zero as possible (the proportion of predictions on the diagonal is called the accuracy, and we will spend Section 2.2.4 discussing why it is not such a great measure).\nAs there are many different possible measures on this matrix, we will introduce them as we go. In this section, it it more important to understand how the matrix responds to two important features of the data and the model: balance and bias.\nBalance refers to the proportion of the positive class. Whenever this balance is not equal to 1/2 (there are as many positives as negative cases), we are performing imbalanced classification, which comes with additional challenges; few ecological problems are balanced.\n\n\n2.2.3 Null classifiers\nA useful baseline to establish whether a model “works” is to measure whether the model performs better than at random. For classification problems, a good baseline is provided by “null” classifiers, in which the underlying structure of the data is known (and respects class balance), but the classifier itself makes guesses at random, for different definitions of random. Because these classifiers are very simple, they are not in fact models; we can directly write their confusion matrix, and apply different measures of model performance to it.\n\n2.2.3.1 The no-skill classifier\nThere is a specific hypothetical classifier, called the no-skill classifier, which guesses classes at random as a function of their proportion. It turns out to have an interesting confusion matrix! If we note \\(b\\) the proportion of positive classes, the no-skill classifier will guess \\(+\\) with probability \\(b\\), and \\(-\\) with probability \\(1-b\\). Because these are also the proportion in the data, we can write the confusion matrix as\n\\[\n\\begin{pmatrix}\nb^2 & b(1-b)\\\\\n(1-b)b & (1-b)^2\n\\end{pmatrix} \\,.\n\\tag{2.3}\\]\nThe proportion of elements that are on the diagonal of this matrix is \\(b^2 + (1-b)^2\\). When \\(b\\) gets lower, this value actually increases: the more difficult a classification problem is, the more accurate random guesses look like. This has a simple explanation, which we expand Section 2.2.4 : when most of the cases are negative, if you predict a negative case often, you will by chance get a very high true negative score. For this reason, measures of model performance will combine the positions of the confusion table to avoid some of these artifacts.\nBias refers to the fact that a model can recommend more (or fewer) positive or negative classes than it should. An extreme example is the zero-rate classifier, which will always guess the most common class, and which is commonly used as a baseline for imbalanced classification. A good classifier has high skill (which we can measure by whether it beats the no-skill classifier for our specific problem) and low bias. In this chapter, we will explore different measures on the confusion table the inform us about these aspects of model performance, using the Naive Bayes Classifier.\n\n\n2.2.3.2 The coin-flip classifier\nAn alternative to the no-skill classifier is the coin-flip classifier, in which classes have their correct prevalence \\(b\\), but the model picks at random with probability \\(1/2\\) within these classes. This differs from the no-skill classifier by adopting a different random chance of picking a class while still respecting the prevalence of the positive class.\nThe confusion matrix of the coin-flip classifier is:\n\\[\n\\begin{pmatrix}\n\\frac{b}{2} & \\frac{1-b}{2}\\\\\n\\frac{b}{2} & \\frac{1-b}{2}\n\\end{pmatrix} \\,.\n\\]\n\n\n2.2.3.3 The constant classifier\nThe last null classifier we can use is the constant classifier, in which we assume that the model will always return some specific class. This is useful to anticipate what the model performance would look like if, for example, the model always predicted the negative outcome (which is a notion we will return to in Section 2.2.4).\nThis classifier has the confusion matrix\n\\[\n\\begin{pmatrix}\nb & 1-b\\\\\n0 & 0\n\\end{pmatrix}\n\\]\nif it always predicts the positive class, and\n\\[\n\\begin{pmatrix}\n0 & 0\\\\\nb & 1-b\n\\end{pmatrix}\n\\]\nif it always predicts the negative class.\n\n\n\n2.2.4 A note on accuracy\nIt is tempting to use accuracy to measure how good a classifier is, because it makes sense: it quantifies how many predictions are correct. But a good accuracy can hide a very poor performance. Let’s think about an extreme case, in which we want to detect an event that happens with prevalence \\(0.05\\). Out of 100 predictions, the confusion matrix of this model would be\n\\[\n\\begin{pmatrix}\n0 & 0 \\\\ 5 & 95\n\\end{pmatrix} \\,.\n\\]\nThe accuracy of this classifier would be \\(0.95\\), which seems extremely high! This is because prevalence is extremely low, and so most of the predictions are about the negative class: the model is on average really good, but is completely missing the point when it comes to making interesting predictions.\nIn fact, even a classifier that would not be that extreme would be mis-represented if all we cared about was the accuracy. If we take the case of the no-skill classifier, the accuracy is given by \\(b^2 + (1-b)^2\\), which is an inverted parabola that is maximized for \\(b \\approx 0\\) – a model guessing at random will appear better when the problem we want to solve gets more difficult. This effect is called the paradox of accuracy.\n\n\nWhenever possible, avoid using accuracy except to communicate the skill of the model in easy to understand terms.\nThis is an issue inherent to accuracy: it can tell you that a classifier is bad (when it is low), but it cannot really tell you when a classifier is good, as no-skill (or worse-than-no-skill) classifiers can have very high values. It remains informative as an a posteriori measure of performance, but only after using reliable measures to ensure that the model means something.\nMore generally, this also illustrates why relying on null classifiers is a good idea: we want to make sure that we are making better predictions than an heavily biased, uninformative model would.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervised classification</span>"
    ]
  },
  {
    "objectID": "chapters/classification.html#the-naive-bayes-classifier",
    "href": "chapters/classification.html#the-naive-bayes-classifier",
    "title": "2  Supervised classification",
    "section": "2.3 The Naive Bayes Classifier",
    "text": "2.3 The Naive Bayes Classifier\n\n\nIn practice, we do not use the Naive Bayes Classifier for SDMs. There are far more powerful alternatives based on boosting, like boosted regression trees, or Bayesian additive regression trees. But NBC makes for an easy to follow example across many chapters.\nThe Naive Bayes Classifier (NBC) is my all-time favorite classifier. It is built on a very simple intuition, works with almost no data, and more importantly, often provides an annoyingly good baseline for other, more complex classifiers to meet. That NBC works at all is counter-intuitive (Hand & Yu 2001). It assumes that all variables are independent, it works when reducing the data to a simpler distribution, and although the numerical estimate of the class probability can be somewhat unstable, it generally gives good predictions. NBC is the data science equivalent of saying “eh, I reckon it’s probably this class” and somehow getting it right 95% of the time. There are, in fact, several papers questioning why NBC works at all (see e.g. Kupervasser 2014).\n\n2.3.1 How the NBC works\nIn Figure 2.1, what is the most likely class if the temperature is 8°C?\nWe can look at the density traces on top, and say that because the one for presences is higher, we would be justified in guessing that the species is present. Of course, this is equivalent to saying that \\(P(8^\\circ C | +) &gt; P(8^\\circ C | -)\\). It would appear that we are looking at the problem in the wrong way, because we are really interested in \\(P(+ | 8^\\circ C)\\), the probability that the species is present knowing that the temperature is 8°C.\nUsing Baye’s theorem, we can re-write our goal as\n\\[\nP(+|x) = \\frac{P(+)}{P(x)}P(x|+) \\,,\n\\tag{2.4}\\]\nwhere \\(x\\) is one value of one feature, \\(P(x)\\) is the probability of this observation (the evidence, in Bayesian parlance), and \\(P(+)\\) is the probability of the positive class (in other words, the prior). So, this is where the “Bayes” part comes from.\nBut why is NBC naive?\nIn Equation 2.4, we have used a single feature \\(x\\), but the problem we want to solve uses a vector of features, \\(\\mathbf{x}\\). These features, statisticians will say, will have covariance, and a joint distribution, and many things that will challenge the simplicity of what we have written so far. These details, NBC says, are meaningless.\nNBC is naive because it makes the assumptions that the features are all independent. This is actually the foundation upon which the NBC is built. To express the assumption of features independence, we simply need to write that \\(P(+|\\mathbf{x}) \\propto P(+)\\prod_i P(\\mathbf{x}_i|+)\\) (by the chain rule). Note that this is not a strict equality: to get the actual value of \\(P(+|\\mathbf{x})\\) we need to divide by the evidence, and so we need to find the expression of the evidence. But instead of doing this, we simply have to note that the evidence is constant across all classes, and so we do not need to measure it to get an estimate of the score for a class. We can think of this assumption in a problem-specific way: if we walk across a landscape at random with regard to our response variable, i.e. we do not know whether the species will be present or not, there is (i) no reason to assume that the probability of measuring a specific temperature (or other feature) will be linked to the response in any way, and (ii) no reason to assume that a third, mysterious value that is neither presence nor absence could ever be measured; therefore, \\(P(\\mathbf{x})\\) is a constant for our model.\nTo generalize our notation, the score for a class \\(\\mathbf{c}_j\\) is \\(P(\\mathbf{c}_j)\\prod_i P(\\mathbf{x}_i|\\mathbf{c}_j)\\). In order to decide on a class, we apply the following rule:\n\\[\n\\hat y = \\text{argmax}_j \\, P(\\mathbf{c}_j)\\prod_i P(\\mathbf{x}_i|\\mathbf{c}_j) \\,.\n\\tag{2.5}\\]\nIn other words, whichever class gives the higher score, is what the NBC will recommend for this instance \\(\\mathbf{x}\\). In ?sec-tuning, we will improve upon this model by thinking about (and eventually calculating) the evidence \\(P(\\mathbf{x})\\) in order to estimate the actual probability, but as you will see, this simple formulation will already prove frightfully effective.\n\n\n2.3.2 How the NBC learns\nThere are two unknown quantities at this point. The first is the value of \\(P(+)\\) and \\(P(-)\\). These are priors, and are presumably important to pick correctly. In the spirit of iterating rapidly on a model, we can use two starting points: either we assume that the classes have the same probability, or we assume that the representation of the classes (the balance of the problem) is their prior. It now helps to think about the no-skill and coin-flip classifier we introduced earlier in the chapter. Assume that we do not use \\(P(x|c)\\) when making our prediction: the baseline against which we compare the model will therefore be entire determined by \\(P(+)\\). Picking a prior of one half is making the predictions at random (like coin-flip), and picking a prior equal to the prevalence is making the predictions at random (like no-skill). Understanding how we set the prior for the NBC is important, as it can ensure that we use a fair baseline to compare it against. Throughout this book, we will let our prior be the prevalence in the training data (and therefore our first task will be to beat the no-skill classifier). Finally, note that we do not need to think about \\(P(-)\\) too much, as it is simply \\(1-P(+)\\): the “state” of every single observation of the presence or absence of the species under a set of measured environmental variables is either \\(+\\) or \\(-\\).\nThe most delicate problem is to figure out \\(P(x|c)\\), the probability of the observation of the variable when the class is known. There are variants here that will depend on the type of data that is in \\(x\\); as we work with continuous variables, we will rely on Gaussian NBC. In Gaussian NBC, we will consider that \\(x\\) comes from a normal distribution \\(\\mathcal{N}(\\mu_{x,c},\\sigma_{x,c})\\), and therefore we simply need to evaluate the probability density function of this distribution at the point \\(x\\). Other types of data are handled in the same way, with the difference that they use a different set of distributions; for example, categorical variables can be represented using multinomial distributions (Abbood et al. 2020).\n\n\nWe could use different approaches to NBC, by using (for example) the empirical CDF function of the training data for each class. We will revisit this idea in chapter ?sec-squint, as it establishes an interesting parallel between different methods.\nTherefore, the learning stage of NBC is extremely quick: we take the mean and standard deviation of the values, split by predictor and by class, and these are the parameters of our classifier. By contrast to the linear regression approach we worked with in ?sec-gradientdescent, the learning phase only involves a single epoch: measuring the mean and standard deviation. This yields a Gaussian NBC with the assumption that variables are normally distributed, because the normal distribution is the maximal entropy distribution when we know these two moments. This also reveals an interesting feature of NBC: it can work when we do not have access to the underlying training data. Imagine a situation where we only have access to published summary statistics about the environmental variables for which the species was observed / not observed: we can use these to establish the Normal distributions for each feature for each class, and use the NBC. Its ability to work under extreme data scarcity (assuming we are comfortable with the assumptions about the shape of the distribution) makes NBC a surprisingly versatile classifier.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervised classification</span>"
    ]
  },
  {
    "objectID": "chapters/classification.html#application-a-baseline-model-of-the-corsican-nuthatch",
    "href": "chapters/classification.html#application-a-baseline-model-of-the-corsican-nuthatch",
    "title": "2  Supervised classification",
    "section": "2.4 Application: a baseline model of the Corsican nuthatch",
    "text": "2.4 Application: a baseline model of the Corsican nuthatch\nIn this section, we will have a look at the temperature and precipitation data from Figure 2.1, and come up with a first version of our classifier, which is to say: we will train our first attempt at an ecological niche model for the Corsican nuthatch.\n\n2.4.1 Training and validation strategy\nTo evaluate our model, as we discussed in ?sec-crossvalidation, we will keep a holdout testing set, that will be composed of 20% of the observations. In this chapter, we will not be using these data, because in order to use them as a stand-in for future predictions, it is important that the model only sees them once (this will happen at the end of ?sec-tuning). Therefore, for the next chapters, we will limit ourselves to an evaluation of the model performance based on the average values of the performance measure we picked as the most informative, calculated on the validation datasets. When, based on this criteria, we have identified and validated the best model, we will evaluate it on the testing data.\nIn this chapter, we will rely on Monte-Carlo cross validation (MCCV; see ?sec-crossvalidation-montecarlo), using 100 replicates. In the following chapters, we will revert to using k-folds cross-validation, but using MCCV here is a good enough starting point.\nIn order to see how good our model really is, we will also compare its performances to various null classifiers. There are almost never difficult classifiers to outperform, but this nevertheless provides a good indication of whether our model works at all. In ?sec-squint, we will introduce a slightly more domain-specific model to provide a baseline that would look like an actual model we would like to out-perform (but mostly to make the general point that any problem can be approached like a machine learning problem).\n\n\n2.4.2 Performance evaluation of the model\nIn order to get a sense of the performance of our model, we will need to decide on a performance measure. This is an important step, as we will use the average value of this measure on the validation data to decide on the best model before reporting the expected performance. If we pick a measure that is biased, we will therefore use a model that is biased. Following Chicco & Jurman (2020) and Jurman et al. (2012), we will use the Matthew’s Correlation Coefficient (MCC) as the “main” measure to evaluate the performance of a model (we will return to other alternative measures in ?sec-tuning, and eventually explain why MCC is the most appropriate for classification evaluation).\nThe MCC is defined as\n\\[\n\\frac{\\text{TP}\\times \\text{TN} - \\text{FP}\\times \\text{FN}}{\\sqrt{(\\text{TP}+\\text{FP})\\times (\\text{TP}+\\text{FN})\\times (\\text{TN}+\\text{FP})\\times (\\text{TN}+\\text{FN})}} \\,.\n\\]\nThe MCC is a correlation coefficient. Specifically, it is the Pearson product-moment correlation on a contingency table, where the contingency table is the confusion table (Powers 2020). Therefore, it returns values in \\([-1, 1]\\), which can be interpreted as every other correlation value. A negative value indicates perfectly wrong predictions, a value of 0 indicates no-skill, and a value of 1 indicates perfect predictions. By picking the model with the highest MCC on the validation data, we are likely to pick the best possible model (after controlling for over-fitting).\nIn addition to reporting the MCC, we will also look at values that inform us on the type of biases in the model, namely the positive and negative predictive values. These values, respectively \\(\\text{TP}/(\\text{TP}+\\text{FP})\\) and \\(\\text{TN}/(\\text{TN}+\\text{FN})\\), measure how likely a prediction of, respectively, presence and absence, are. To put it in other words, they measure how much the “true” events are represented in all of the predictions for a given even type: a PPV value of 0.7 means that 7 out of 10 positive predictions were true positives. These range in \\([0,1]\\), and values of one indicate a better performance of the model. It may help to sometimes talk about the falses predictions, in which case the false omission rate (1 - NPV) and false discovery rate (1 - PPV) can be used: they quantify the risk we take when acting on a positive or negative recommendation from the model.\nWhy not pick one of these instead of the MCC? Because all modeling is compromise; we don’t want a model to become too good at predicting absences, to the point where prediction about presences would become meaningless. Selecting models on the basis of a measure that only emphasizes one outcome is a risk that we shouldn’t be willing to take. For this reason, measures that are good at optimizing the value of a negative and a positive prediction are far better representations of the performance of a model. The MCC does just this.\n\n\n\n\n\n\n\nFigure 2.2: Overview of the scores for the Matthew’s correlation coefficient, as well as the positive and negative predictive values.\n\n\n\n\nThe output of cross-validation is given in Figure 2.2 (and compared to the no-skill classifier in Table 2.1). As we are satisfied with the model performance, we can re-train it using all the data (but not the part used for testing) in order to make our first series of predictions.\n\n\n\nTable 2.1: Overview of the data presented in Figure 2.2, compared to the null classifiers from Section 2.2.3. Note that the MCC gives values of 0 for most null classifiers, which is not the case with other measures of performance. Missing values cannot be calculated as they involved a denominator of 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMeasure\nTraining\nValidation\nNo-skill\nCoin-flip\nPositive\nNegative\n\n\n\n\nAccuracy\n0.87\n0.87\n0.51\n0.43\n0.43\n0.57\n\n\nNPV\n0.89\n0.89\n0.57\n0.43\n\n0.57\n\n\nPPV\n0.83\n0.83\n0.43\n0.43\n0.43\n\n\n\nMCC\n0.73\n0.73\n-0.00\n-0.15\n0.00\n0.00\n\n\n\n\n\n\n\n\n2.4.3 The decision boundary\nNow that the model is trained, we can take a break in our discussion of its performance, and think about why it makes a specific classification in the first place. Because we are using a model with only two input features, we can generate a grid of variables, and the ask, for every point on this grid, the classification made by our trained model. This will reveal the regions in the space of parameters where the model will conclude that the species is present.\n\n\n\n\n\n\n\nFigure 2.3: Overview of the decision boundary between the positive (orange) and negative (grey) classes using the NBC with two variables. Note that, as expected with a Gaussian distribution, the limit between the two classes looks circular. The assumption of statistical independance between the features means that we would not see, for example, an ellipse.\n\n\n\n\nThe output of this simulation is given in Figure 2.3. Of course, in a model with more features, we would need to adapt our visualisations, but because we only use two features here, this image actually gives us a complete understanding of the model decision process. Think of it this way: even if we lose the code of the model, we could use this figure to classify any input made of a temperature and a precipitation, and read what the model decision would have been.\n\n\nTake a minute to think about which places are more likely to have lower temperatures on an island. Is there an additional layer of geospatial information we could add that would be informative?\nThe line that separates the two classes is usually referred to as the “decision boundary” of the classifier: crossing this line by moving in the space of features will lead the model to predict another class at the output. In this instance, as a consequence of the choice of models and of the distribution of presence and absences in the environmental space, the decision boundary is not linear.\nIt is interesting to compare Figure 2.3 with, for example, the distribution of the raw data presented in Figure 2.1. Although we initially observed that temperature was giving us the best chance to separate the two classes, the shape of the decision boundary suggests that our classifier is considering that Corsican nuthatches enjoy colder climates with more rainfall.\n\n\n2.4.4 Visualizing the trained model\nWe can now go through all of the pixels in the island of Corsica, and apply the model to predict the presence of Sitta whiteheadi. This result is reported in Figure 2.4. Because we have used training data for which we know the labels, we can also map the outcome of applying the model, which is to say: where are the false/true negative/positive predictions. The model seems to be making a series of false positive predictions in the northernmost part of Corsica, which may suggest that we are missing predictors relevant to this area that would refine the prediction of the suitability of the habitat.\n\n\n\n\n\n\n\nFigure 2.4: Occurence data (left; presences are in orange and pseudo-absences in black), prediction of presences in space under the two-variables model (middle), with the four blocks of the confusion matrix also mapped. As we could have anticipated from the high values of the MCC, even this simple model does an adequate job at predicting the presence of Sitta whiteheadi, but would definitely stand to be improved, possibly by accounting for more features.\n\n\n\n\n\n\n2.4.5 What is an acceptable model?\nWhen comparing the prediction to the spatial distribution of occurrences (Figure 2.4), it appears that the model identifies an area in the northeast where the species is likely to be present, despite limited observations. This might result in more false positives, but this is the purpose of running this model – if the point data were to provide us with a full knowledge of the range, there would be no point in running the model. For this reason, it is very important to nuance our interpretation of what a false-positive prediction really is. We will get back to this discussion in the next chapters, when adding more complexity to the model. For now, we have established a basic training routine for our model, and have started thinking spatially about where it is making errors (in space).\nNote that by visualizing the type of mis-classification from our training set, we gain a better understanding of how the model is wrong. False positives, for example, tends to be clustered either at the western margin of the main patch of the predicted range, and in a small number of clusters in the North. False negatives are also fairly close to the edge of the predicted range, but clustered towards the center of the island. This is a good sign! The errors that our model is making appear to be mostly at the margin of the habitat of the species, which we know (ecologically) is more difficult to properly map out.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervised classification</span>"
    ]
  },
  {
    "objectID": "chapters/classification.html#conclusion",
    "href": "chapters/classification.html#conclusion",
    "title": "2  Supervised classification",
    "section": "2.5 Conclusion",
    "text": "2.5 Conclusion\nIn this chapter, we introduced the Naive Bayes Classifier as a model for classification, and applied it to a data of species occurrence, in which we predicted the potential presence of the species using temperature and precipitation. Through cross-validation, we confirmed that this model gave a good enough performance (Figure 2.2), looked at the decisions that were being made by the trained model (Figure 2.3), and finally mapped the prediction and their associated errors in space (Figure 2.4). Based on this information, we concluded that the model was a reasonable first approximation of where Sitta whiteheadi can be present. In the next chapter, we will improve upon this model by looking at techniques to select and transform variables.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervised classification</span>"
    ]
  }
]